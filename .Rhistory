plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
d
hc
hc <- hclust(as.dist(max(jm)-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
max(jm)-jm
plot(d, main="Hierarchical Clustering across superpopulations")
hclplot <- function(jaccardMat, pop1, pop2, name){
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
jaccardMat <- jaccardMat[popsubset,popsubset]
diag(jaccardMat) <- 0
lowest.node <- max(jaccardMat)
hclObj <- as.dendrogram(hclust(as.dist(1-jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
}
rownames(jm)
colnames(jm)
hclplot(jm,"STU","ITU","test")
jaccardMat <-  jm
pop1 <- "ITU"
pop2 <- "STU"
name
name <- "test"
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
sample
jaccardMat<-allSamplesGSM
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
jaccardMat <- jaccardMat[popsubset,popsubset]
diag(jaccardMat) <- 0
lowest.node <- max(jaccardMat)
hclObj <- as.dendrogram(hclust(as.dist(1-jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
library(data.table)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(cluster)
library(dendextend)
hclObj <- as.dendrogram(hclust(as.dist(1-jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
?as.dist
hclObj <- as.dendrogram(hclust(as.dist(max(jaccardMat)-jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
hclObj <- as.dendrogram(hclust(as.dist((max(jaccardMat)-jaccardMat))/max(jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
hclplot(allSamplesGSM,"STU","ITU","test")
hclplot <- function(jaccardMat, pop1, pop2, name){
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
jaccardMat <- jaccardMat[popsubset,popsubset]
diag(jaccardMat) <- 0
lowest.node <- max(jaccardMat)
hclObj <- as.dendrogram(hclust(as.dist((max(jaccardMat)-jaccardMat))/max(jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
}
hclplot(allSamplesGSM,"STU","ITU","test")
hclplot(varcovMat,"STU","ITU","test")
jaccardMat <- varcovMat
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
jaccardMat <- jaccardMat[popsubset,popsubset]
diag(jaccardMat) <- 0
lowest.node <- max(jaccardMat)
hclObj <- as.dendrogram(hclust(as.dist((max(jaccardMat)-jaccardMat))/max(jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
jaccardMat
hclplot <- function(jaccardMat, pop1, pop2, name){
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
jaccardMat <- jaccardMat[popsubset,popsubset]
diag(jaccardMat) <- 0
lowest.node <- max(jaccardMat)
hclObj <- as.dendrogram(hclust(as.dist((max(jaccardMat)-jaccardMat)/max(jaccardMat)),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
}
hclplot(varcovMat,"STU","ITU","test")
hclplot(allSamplesGSM,"STU","ITU","test")
rownames(jaccardMat) <- sample[,2]
jaccardMat <- varcovMat
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
jaccardMat <- jaccardMat[popsubset,popsubset]
diag(jaccardMat) <- 0
lowest.node <- max(jaccardMat)
hclObj <- as.dendrogram(hclust(as.dist((max(jaccardMat)-jaccardMat)/max(jaccardMat)),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
lowest.node
hclplot <- function(jaccardMat, pop1, pop2, name){
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
jaccardMat <- jaccardMat[popsubset,popsubset]
diag(jaccardMat) <- 0
jaccardMat <- (max(jaccardMat)-jaccardMat)/max(jaccardMat)
lowest.node <- max(jaccardMat)
hclObj <- as.dendrogram(hclust(as.dist(jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
}
hclplot(varcovMat,"STU","ITU","test")
hclplot(allSamplesGSM,"STU","ITU","test")
res <- readRDS('~/1000GP/plots/s_distributions/plotdata/allSamples_sij_80695')
res <- readRDS('~/1000GP/plots/s_distributions/plotdata/allSamples_sij_80695.rds')
allSamplesGSM <- res[['s_i_j']]
names(allSamplesGSM)
length(allSamplesGSM)
dim(allSamplesGSM)
allSamplesGSM <- res
hclplot(allSamplesGSM,"STU","ITU","test")
hclplot(allSamplesGSM,"STU","CEU","test")
hist(c(allSamplesGSM))
hist(c(varcovMat))
kmeans
kmeans(jaccardMat,k=2)
?kmeans
?pam
pam(allSamplesGSM, k=5, diss=T)
pam(10-allSamplesGSM, k=5, diss=T)
pam(10-varcovMat, k=5, diss=T)
?pam
summary(pam(10-varcovMat, k=5, diss=T))
plot(pam(10-varcovMat, k=5, diss=T))
calculateSMatrix <- function(subpop="CEU", filename="./data/combinedFiltered1000.gz", numberOfLines=10695, minVariants=5, alpha=.01){
print(subpop)
filename <- "./data/combinedFiltered1000.gz"
con <- file(filename, "rt")
#     system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
hap.sampleIDs.subset <- hap.sampleIDs[hap.pop%in%subpop]
sampleIDs.subset <- sampleIDs[pop%in%subpop]
close(con)
numSamples <- ncol(genotypes)
sumVariants <- rowSums(genotypes)
# reverse so that MAF<.5
genotypes[sumVariants>(numSamples/2),] <- 1-genotypes[sumVariants>(numSamples/2),]
sumVariants <- rowSums(genotypes)
# remove < n variants
genotypes <- genotypes[sumVariants>minVariants,]
print("Number of used variants")
print(nrow(genotypes))
numFilteredVariants <- nrow(genotypes)
sumFilteredVariants <- rowSums(genotypes)
varcovMat <- cov(genotypes[,c(T,F)] + genotypes[,c(F,T)])
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s <- sum((1-p)/p)/(numFilteredVariants^2)
print("variance of s")
print(var_s)
num_comparisons <- numSamples*(numSamples-1)/2
bonferroni_cutoff <- qnorm((1-alpha/(2*num_comparisons)), sd=sqrt(var_s)) + 1
s.i.j.numerator <- t(genotypes*weights)%*%genotypes
s.i.j.denominator <- numFilteredVariants
s.i.j <- s.i.j.numerator/s.i.j.denominator
print(mean(s.i.j[row(s.i.j)!=col(s.i.j)]))
print(median(s.i.j[row(s.i.j)!=col(s.i.j)]))
topValuesHap <- sort(s.i.j[row(s.i.j)>col(s.i.j)], decreasing=T)
print(t(sapply(1:10, function(x){
which(s.i.j==topValuesHap[x], arr.ind=T)[1,]
})))
topHapIndices <- sapply(1:10, function(x){
which(s.i.j==topValuesHap[x], arr.ind=T)[1,]
})
# This needed to prevent errors when there are no significant results
if (sum(topValuesHap[1:10]>bonferroni_cutoff)>0){
topHapIndices <- topHapIndices[,topValuesHap[1:10]>bonferroni_cutoff]
mappedTopHapHits <- matrix(hap.sampleIDs.subset[topHapIndices],nrow=2)
topHitsNamesHap <- apply(mappedTopHapHits,2,paste0,collapse="_")
topValuesHap <- topValuesHap[topValuesHap>bonferroni_cutoff]
topValuesHap <- head(topValuesHap,10)
} else {
topHitsNamesHap <- NA
topValuesHap <- 0
}
# Collapse to diploid
s.i.j.dip <- (s.i.j[c(T,F),c(T,F)] + s.i.j[c(F,T),c(T,F)] +s.i.j[c(T,F),c(F,T)] + s.i.j[c(F,T),c(F,T)])/4
print(mean(s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)]))
print(median(s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)]))
num_comparisons_dip <- choose(ncol(s.i.j.dip),2)
# very lazy variance estimate...
var_s_dip <- var_s/4
bonferroni_cutoff_dip <- qnorm((1-alpha)^(1/num_comparisons_dip), sd=sqrt(var_s_dip)) + 1
topValuesDip <- sort(s.i.j.dip[row(s.i.j.dip)>col(s.i.j.dip)], decreasing=T)
topDipIndices <- sapply(1:10, function(x){
which(s.i.j.dip==topValuesDip[x], arr.ind=T)[1,]
})
# This needed to prevent errors when there are no significant results
if (sum(topValuesDip[1:10]>bonferroni_cutoff_dip)>0){
topDipIndices <- topDipIndices[,topValuesDip[1:10]>bonferroni_cutoff_dip]
mappedTopDipHits <- matrix(sampleIDs.subset[topDipIndices],nrow=2)
topHitsNamesDip <- apply(mappedTopDipHits,2,paste0,collapse="_")
topValuesDip <- topValuesDip[topValuesDip>bonferroni_cutoff_dip]
topValuesDip <- head(topValuesDip,10)
} else {
topHitsNamesDip <- NA
topValuesDip <- 0
}
plotData <- data.frame(hap=(s.i.j[row(s.i.j)!=col(s.i.j)]))
hapPlot <- ggplot(plotData, aes(hap, col="blue")) + geom_histogram(color="red",binwidth=.02,fill=I("blue")) +
ggtitle(paste0(subpop,collapse="_")) +
theme(plot.title = element_text(size=80), axis.title.x = element_text(size = 10))+
xlab("s") + geom_vline(xintercept = bonferroni_cutoff, color="red", linetype="dotted") +
annotate("text", x=bonferroni_cutoff -.06, y=400, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons, digits=1)), color="red",angle = 90, size = 10, hjust = 0) +
annotate("text", x=topValuesHap, y=10, label=topHitsNamesHap,angle = 80, hjust=0, size = 10)
pdf(paste0("./plots/s_distributions/",paste0(subpop,collapse="_"),"haploid.pdf"), width=4, height=4)
print(hapPlot)
dev.off()
plotData <- data.frame(dip=s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)])
dipPlot <- ggplot(plotData, aes(dip, col="blue")) + geom_histogram(color="red",binwidth=.02,fill=I("blue")) +
ggtitle(paste0(subpop,collapse="_"))  +
theme(plot.title = element_text(size=80), axis.title.x = element_text(size = 10)) +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff_dip, color="red", linetype="dotted") +
annotate("text", x=bonferroni_cutoff_dip -.02, y=200, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons_dip, digits=1)), color="red", angle = 90, size = 10, hjust = 0) +
annotate("text", x=topValuesDip, y=10, label=topHitsNamesDip,angle = 80, hjust=0, size = 10)
pdf(paste0("./plots/s_distributions/",paste0(subpop,collapse="_"),"diploid.pdf"), width=4, height=4)
print(dipPlot)
dev.off()
saveRDS(s.i.j.dip, paste0("./plots/s_distributions/plotdata/",paste0(subpop,collapse="_"),"_sij.rds",collapse="_"))
list(s_i_j = s.i.j.dip, varcovMat=varcovMat)
}
library(ggplot2)
genotypeFile <- "./data/combinedFiltered1000.gz"
minVariants <- 10
args<-commandArgs(TRUE)
if(length(args)!=0){
genotypeFile <- args[1]
numberOfLines <- as.numeric(args[2])
minVariants <- as.numeric(args[3])
}
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
source('~/1000GP/s_matrix_functions.R')
source('~/1000GP/all_samples_HCL.R')
unique(pop)
calculateSMatrix(i, filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
numberOfLines <- 10000
minVariants=20
calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
source('~/1000GP/s_matrix_functions.R')
numberOfLines <- 1000
calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
source('~/1000GP/s_matrix_functions.R')
calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
source('~/1000GP/s_matrix_functions.R')
calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
abc <- calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
source('~/1000GP/s_matrix_functions.R')
abc <- calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
unique(pop)
unique(pop)[2]
abc <- calculateSMatrix(unique(pop)[2], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
abc <- calculateSMatrix(unique(pop)[2], filename=genotypeFile, numberOfLines=numberOfLines*10, minVariants=minVariants)
unique(pop)
abc <- calculateSMatrix(unique(pop)[14], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
abc <- calculateSMatrix(unique(pop)[14], filename=genotypeFile, numberOfLines=numberOfLines*20, minVariants=minVariants)
abc <- calculateSMatrix(unique(pop)[14], filename=genotypeFile, numberOfLines=numberOfLines*40, minVariants=minVariants)
source('~/1000GP/s_matrix_functions.R')
abc <- calculateSMatrix(unique(pop)[14], filename=genotypeFile, numberOfLines=numberOfLines*40, minVariants=minVariants)
var
getwd()
alpha=.01
minVariants=5
numberOfLines=10695
filename="./data/combinedFiltered1000.gz"
subpop="CEU"
print(subpop)
filename <- "./data/combinedFiltered1000.gz"
con <- file(filename, "rt")
#     system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
# Real data
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
numberOfLines=1069
system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
hap.sampleIDs.subset <- hap.sampleIDs[hap.pop%in%subpop]
hap.sampleIDs.subset
sampleIDs.subset <- sampleIDs[pop%in%subpop]
close(con)
numSamples <- ncol(genotypes)
sumVariants <- rowSums(genotypes)
# reverse so that MAF<.5
genotypes[sumVariants>(numSamples/2),] <- 1-genotypes[sumVariants>(numSamples/2),]
sumVariants <- rowSums(genotypes)
# remove < n variants
genotypes <- genotypes[sumVariants>minVariants,]
print("Number of used variants")
print(nrow(genotypes))
numFilteredVariants <- nrow(genotypes)
sumFilteredVariants <- rowSums(genotypes)
varcovMat <- cov(genotypes[,c(T,F)] + genotypes[,c(F,T)])
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s <- sum((1-p)/p)/(numFilteredVariants^2)
print("variance of s")
print(var_s)
num_comparisons <- numSamples*(numSamples-1)/2
bonferroni_cutoff <- qnorm((1-alpha/(2*num_comparisons)), sd=sqrt(var_s)) + 1
s.i.j.numerator <- t(genotypes*weights)%*%genotypes
s.i.j.denominator <- numFilteredVariants
s.i.j <- s.i.j.numerator/s.i.j.denominator
print(mean(s.i.j[row(s.i.j)!=col(s.i.j)]))
print(median(s.i.j[row(s.i.j)!=col(s.i.j)]))
plotFromGSM(s.i.j, varS, hap.sampleIDs.subset, "haploid")
source('~/.active-rstudio-document')
plotFromGSM(s.i.j, varS, hap.sampleIDs.subset, "haploid")
plotFromGSM(s.i.j, var_s, hap.sampleIDs.subset, "haploid")
library(ggplot2)
plotFromGSM(s.i.j, var_s, hap.sampleIDs.subset, "haploid")
# Collapse to diploid
s.i.j.dip <- (s.i.j[c(T,F),c(T,F)] + s.i.j[c(F,T),c(T,F)] +s.i.j[c(T,F),c(F,T)] + s.i.j[c(F,T),c(F,T)])/4
# very lazy variance estimate...
varS <- var_s/4
plotFromGSM(s.i.j.dip, varS, sampleIDs.subset, "diploid")
numberOfLines=10695
print(subpop)
filename <- "./data/combinedFiltered1000.gz"
con <- file(filename, "rt")
system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
close(con)
hap.sampleIDs.subset <- hap.sampleIDs[hap.pop%in%subpop]
sampleIDs.subset <- sampleIDs[pop%in%subpop]
numSamples <- ncol(genotypes)
sumVariants <- rowSums(genotypes)
# reverse so that MAF<.5
genotypes[sumVariants>(numSamples/2),] <- 1-genotypes[sumVariants>(numSamples/2),]
sumVariants <- rowSums(genotypes)
# remove < n variants
genotypes <- genotypes[sumVariants>minVariants,]
print("Number of used variants")
print(nrow(genotypes))
numFilteredVariants <- nrow(genotypes)
sumFilteredVariants <- rowSums(genotypes)
varcovMat <- cov(genotypes[,c(T,F)] + genotypes[,c(F,T)])
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s <- sum((1-p)/p)/(numFilteredVariants^2)
print("variance of s")
print(var_s)
num_comparisons <- numSamples*(numSamples-1)/2
bonferroni_cutoff <- qnorm((1-alpha/(2*num_comparisons)), sd=sqrt(var_s)) + 1
s.i.j.numerator <- t(genotypes*weights)%*%genotypes
s.i.j.denominator <- numFilteredVariants
s.i.j <- s.i.j.numerator/s.i.j.denominator
print(mean(s.i.j[row(s.i.j)!=col(s.i.j)]))
print(median(s.i.j[row(s.i.j)!=col(s.i.j)]))
plotFromGSM(s.i.j, var_s, hap.sampleIDs.subset, "haploid")
# Collapse to diploid
s.i.j.dip <- (s.i.j[c(T,F),c(T,F)] + s.i.j[c(F,T),c(T,F)] +s.i.j[c(T,F),c(F,T)] + s.i.j[c(F,T),c(F,T)])/4
# very lazy variance estimate...
varS <- var_s/4
plotFromGSM(s.i.j.dip, varS, sampleIDs.subset, "diploid")
numberOfLines=40695
print(subpop)
filename <- "./data/combinedFiltered1000.gz"
con <- file(filename, "rt")
system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
close(con)
hap.sampleIDs.subset <- hap.sampleIDs[hap.pop%in%subpop]
sampleIDs.subset <- sampleIDs[pop%in%subpop]
numSamples <- ncol(genotypes)
sumVariants <- rowSums(genotypes)
# reverse so that MAF<.5
genotypes[sumVariants>(numSamples/2),] <- 1-genotypes[sumVariants>(numSamples/2),]
sumVariants <- rowSums(genotypes)
# remove < n variants
genotypes <- genotypes[sumVariants>minVariants,]
print("Number of used variants")
print(nrow(genotypes))
numFilteredVariants <- nrow(genotypes)
sumFilteredVariants <- rowSums(genotypes)
varcovMat <- cov(genotypes[,c(T,F)] + genotypes[,c(F,T)])
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s <- sum((1-p)/p)/(numFilteredVariants^2)
print("variance of s")
print(var_s)
num_comparisons <- numSamples*(numSamples-1)/2
bonferroni_cutoff <- qnorm((1-alpha/(2*num_comparisons)), sd=sqrt(var_s)) + 1
s.i.j.numerator <- t(genotypes*weights)%*%genotypes
s.i.j.denominator <- numFilteredVariants
s.i.j <- s.i.j.numerator/s.i.j.denominator
print(mean(s.i.j[row(s.i.j)!=col(s.i.j)]))
print(median(s.i.j[row(s.i.j)!=col(s.i.j)]))
plotFromGSM(s.i.j, var_s, hap.sampleIDs.subset, "haploid")
# Collapse to diploid
s.i.j.dip <- (s.i.j[c(T,F),c(T,F)] + s.i.j[c(F,T),c(T,F)] +s.i.j[c(T,F),c(F,T)] + s.i.j[c(F,T),c(F,T)])/4
# very lazy variance estimate...
varS <- var_s/4
plotFromGSM(s.i.j.dip, varS, sampleIDs.subset, "diploid")
saveRDS(s.i.j.dip, paste0("./plots/s_distributions/plotdata/",paste0(subpop,collapse="_"),"_sij_dip.rds"))
saveRDS(s.i.j, paste0("./plots/s_distributions/plotdata/",paste0(subpop,collapse="_"),"_sij_hap.rds"))
?separate
library(tidyr)
?separate
data.frame(x = c(NA, "a.b", "a.d", "b.c"))
separate(x, c("A", "B"))
data.frame(x = c(NA, "a.b", "a.d", "b.c"))
separate(data.frame(x = c(NA, "a.b", "a.d", "b.c")),x, c("A", "B"))
separate(data.frame(x = c(NA, "a.b", "a.d", "bc")),x, c("A", "B"))
separate(data.frame(x = c(NA, "a.b", "a.d", "b c")),x, c("A", "B"))
separate(data.frame(x = c(NA, "a.b", "a.d", "b  c")),x, c("A", "B"))
separate(data.frame(x = c(NA, "a.b", "a.d", "b   dc")),x, c("A", "B"))
separate(data.frame(x = c(NA, "a.b", "a.d", "b d  dc")),x, c("A", "B"))
genotypeFile <- "./data/1000GP_Phase3_chr10.hap.gz"
minVariants <- 10
args<-commandArgs(TRUE)
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
source('~/1000GP/s_matrix_functions.R')
calculateSMatrix("CEU", filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
cor(rnorm(1000),x)
x<-rnorm(1000)
cor(rnorm(1000),x)
cor(cbind(rnorm(1000),rnorm(1000)),x)
rep(rnorm(1),3)
rnorm(1000)
print(subpop)
x<-LETTERS[1:10]
y<-LETTERS[3:4]
x%*%y
x%paste%y
x%o%y
(1:10)%*%(1:10)
t(1:10)%*%(1:10)
(1:10)%*%t(1:10)
(1:10)%o%t(1:10)
library(SpikeInSubset)
biocLite("SpikeInSubset")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
library(SpikeInSubset)
biocLite("SpikeInSubset")
library(SpikeInSubset)
data(rma95)
fac <- factor(rep(1:2,each=3))
library(genefilter)
biocLite("genefilter")
library(genefilter)
rtt <- rowttests(exprs(rma95),fac)
mask <- with(rtt, abs(dm) < .2 & p.value < .01)
spike <- rownames(rma95) %in% colnames(pData(rma95))
cols <- ifelse(mask,"red",ifelse(spike,"dodgerblue","black"))
with(rtt, plot(-dm, -log10(p.value), cex=.8, pch=16,
xlim=c(-1,1), ylim=c(0,5),
xlab="difference in means",
col=cols))
abline(h=2,v=c(-.2,.2), lty=2)
with(rtt, plot(-dm, -log10(p.value), cex=.8, pch=16,
xlim=c(-1,1), ylim=c(0,5),
xlab="difference in means",
col=cols))
plot(-dm, -log10(rtt$p.value), cex=.8, pch=16,
xlim=c(-1,1), ylim=c(0,5),
xlab="difference in means",
col=cols)
plot(-rtt$dm, -log10(rtt$p.value), cex=.8, pch=16,
xlim=c(-1,1), ylim=c(0,5),
xlab="difference in means",
col=cols)
cols
head(rtt)
library(ggplot2)
genotypeFile <- "./data/1000GP_Phase3_chr10.hap.gz"
minVariants <- 10
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
source('~/1000GP/s_matrix_functions.R')
numberOfLines
numberOfLines <- 1000
res <- calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
source('~/1000GP/s_matrix_functions.R')
res <- calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
