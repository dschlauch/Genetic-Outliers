#     d <- dendrapply(as.dendrogram(hc, hang=max(simMat)*.1), labelCol)
#     plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(simMat)*1.25,1))
#     simMat[simMat>.005]<-.005
#     simMat[simMat>quantile(simMat,.99)]<-quantile(simMat,.99)
breaks <- c(seq(quantile(simMat,.35, na.rm=T),quantile(simMat,.55, na.rm=T),length.out=100), # Blue breaks
seq(quantile(simMat,.55, na.rm=T),quantile(simMat,.85, na.rm=T),length.out=100)) # Red breaks
heatmap.2(simMat, Rowv=F, Colv=F, dendrogram="none", trace="none", main="", cex.main=12, col="bluered",
labRow="",labCol="",key=FALSE, RowSideColors=colorCodes[rownames(simMat)], ColSideColors=colorCodesPop[colnames(simMat)],
breaks=breaks)
title(main=titleText,cex.main = 4)
legend(0.1,.5, names(colorCodes), inset=.1,  lty=1, lwd=30, col=colorCodes, cex = 2)
legend("topright", names(colorCodesPop[1:9]),  lty=1, lwd=30, col=colorCodesPop[1:9], cex = 1.5, horiz = T,  inset=c(.04,.05))
legend("topright", names(colorCodesPop[10:18]),  lty=1, lwd=30, col=colorCodesPop[10:18], cex = 1.5, horiz = T,  inset=c(.04,.10))
legend("topright", names(colorCodesPop[19:26]),  lty=1, lwd=30, col=colorCodesPop[19:26], cex = 1.5, horiz = T,  inset=c(.04,.15))
}
plotHeatmap(jaccardMatrix,title="Genetic Similarity Matrix")
plotHeatmap(varcovMatrix,title="Varcov GSM")
x<- jm
if(is.na(subset)){
subset <- rep(T,nrow(x))
}
simMat <- as.matrix(x)[subset,subset]
diag(simMat)<- NA
breaks <- c(seq(quantile(simMat,.35, na.rm=T),quantile(simMat,.55, na.rm=T),length.out=100), # Blue breaks
seq(quantile(simMat,.55, na.rm=T),quantile(simMat,.85, na.rm=T),length.out=100)) # Red breaks
heatmap.2(simMat, Rowv=F, Colv=F, dendrogram="none", trace="none", main="", cex.main=12, col="bluered",
labRow="",labCol="",key=FALSE, RowSideColors=colorCodes[rownames(simMat)], ColSideColors=colorCodesPop[colnames(simMat)],
breaks=breaks)
hc <- hclust(as.dist(max(jm)-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations")
numberOfLines
ldPrune
numberOfLines<-30000
system.time(results <- calculateSMatrix(c("CEU","YRI"), filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants, qcFilter=qcFilter, ldPrune))
results <- readRDS("~/1000GP/plots/s_distributions/plotdata/STU_ITU_data.rds")
jaccardMatrix <- results$s_matrix_dip
varcovMatrix <- results$varcovMat
# ### hierarchical clustering
#
# subset <- sample(2504,100)
subset <- T
jm <- as.matrix(jaccardMatrix)[subset,subset]
varcovMatrix <- as.matrix(varcovMatrix)[subset,subset]
# diag(jm)<-0
whichPeople <- sampleIDs%in%rownames(jaccardMatrix)
rownames(jm) <- group[whichPeople]
colnames(jm) <- pop[whichPeople]
jm <- jm[order(rownames(jm),colnames(jm)),order(rownames(jm),colnames(jm))]
rownames(varcovMatrix) <- group[whichPeople]
colnames(varcovMatrix) <- pop[whichPeople]
varcovMatrix <- varcovMatrix[order(rownames(varcovMatrix),colnames(varcovMatrix)),order(rownames(varcovMatrix),colnames(varcovMatrix))]
hc <- hclust(as.dist(max(jm)-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations")
1
jm[1:5,1:5]
results <- readRDS("~/1000GP/plots/s_distributions/plotdata/STU_ITU_data.rds")
jaccardMatrix <- results$s_matrix_dip
varcovMatrix <- results$varcovMat
# ### hierarchical clustering
#
# subset <- sample(2504,100)
subset <- T
jm <- as.matrix(jaccardMatrix)[subset,subset]
varcovMatrix <- as.matrix(varcovMatrix)[subset,subset]
# diag(jm)<-0
whichPeople <- sampleIDs%in%rownames(jaccardMatrix)
rownames(jm) <- group[whichPeople]
colnames(jm) <- pop[whichPeople]
jm <- jm[order(rownames(jm),colnames(jm)),order(rownames(jm),colnames(jm))]
rownames(varcovMatrix) <- group[whichPeople]
colnames(varcovMatrix) <- pop[whichPeople]
varcovMatrix <- varcovMatrix[order(rownames(varcovMatrix),colnames(varcovMatrix)),order(rownames(varcovMatrix),colnames(varcovMatrix))]
hc <- hclust(as.dist(max(jm)-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations")
#
results <- readRDS("~/1000GP/plots/s_distributions/plotdata/CEU_YRI_data.rds")
jaccardMatrix <- results$s_matrix_dip
varcovMatrix <- results$varcovMat
# ### hierarchical clustering
#
# subset <- sample(2504,100)
subset <- T
jm <- as.matrix(jaccardMatrix)[subset,subset]
varcovMatrix <- as.matrix(varcovMatrix)[subset,subset]
# diag(jm)<-0
whichPeople <- sampleIDs%in%rownames(jaccardMatrix)
rownames(jm) <- group[whichPeople]
colnames(jm) <- pop[whichPeople]
jm <- jm[order(rownames(jm),colnames(jm)),order(rownames(jm),colnames(jm))]
rownames(varcovMatrix) <- group[whichPeople]
colnames(varcovMatrix) <- pop[whichPeople]
varcovMatrix <- varcovMatrix[order(rownames(varcovMatrix),colnames(varcovMatrix)),order(rownames(varcovMatrix),colnames(varcovMatrix))]
hc <- hclust(as.dist(max(jm)-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations")
#
plotHeatmap <-  function(x, subset=NA, titleText="GSM"){
if(is.na(subset)){
subset <- rep(T,nrow(x))
}
simMat <- as.matrix(x)[subset,subset]
diag(simMat)<- NA
#     rownames(simMat) <- group[subset]
#     colnames(simMat) <- pop[subset]
#     simMat <- simMat[order(group,pop),order(group,pop)]
#     hc <- hclust(as.dist(1-simMat),method="average")
#     d <- dendrapply(as.dendrogram(hc, hang=max(simMat)*.1), labelCol)
#     plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(simMat)*1.25,1))
#     simMat[simMat>.005]<-.005
#     simMat[simMat>quantile(simMat,.99)]<-quantile(simMat,.99)
breaks <- c(seq(quantile(simMat,.35, na.rm=T),quantile(simMat,.55, na.rm=T),length.out=100), # Blue breaks
seq(quantile(simMat,.55, na.rm=T),quantile(simMat,.85, na.rm=T),length.out=100)) # Red breaks
heatmap.2(simMat, Rowv=F, Colv=F, dendrogram="none", trace="none", main="", cex.main=12, col="bluered",
labRow="",labCol="",key=FALSE, RowSideColors=colorCodes[rownames(simMat)], ColSideColors=colorCodesPop[colnames(simMat)],
breaks=breaks)
title(main=titleText,cex.main = 4)
legend(0.1,.5, names(colorCodes), inset=.1,  lty=1, lwd=30, col=colorCodes, cex = 2)
legend("topright", names(colorCodesPop[1:9]),  lty=1, lwd=30, col=colorCodesPop[1:9], cex = 1.5, horiz = T,  inset=c(.04,.05))
legend("topright", names(colorCodesPop[10:18]),  lty=1, lwd=30, col=colorCodesPop[10:18], cex = 1.5, horiz = T,  inset=c(.04,.10))
legend("topright", names(colorCodesPop[19:26]),  lty=1, lwd=30, col=colorCodesPop[19:26], cex = 1.5, horiz = T,  inset=c(.04,.15))
}
plotHeatmap(jaccardMatrix,title="Genetic Similarity Matrix")
numberOfLines
numberOfLines<--1
ldPrune
ldPrune<-1
qcFilter
minVariants
system.time(results <- calculateSMatrix(c("STU","ITU"), filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants, qcFilter=qcFilter, ldPrune))
results <- readRDS("~/1000GP/plots/s_distributions/plotdata/STU_ITU_data.rds")
jaccardMatrix <- results$s_matrix_dip
varcovMatrix <- results$varcovMat
# ### hierarchical clustering
#
# subset <- sample(2504,100)
subset <- T
jm <- as.matrix(jaccardMatrix)[subset,subset]
varcovMatrix <- as.matrix(varcovMatrix)[subset,subset]
# diag(jm)<-0
whichPeople <- sampleIDs%in%rownames(jaccardMatrix)
rownames(jm) <- group[whichPeople]
colnames(jm) <- pop[whichPeople]
jm <- jm[order(rownames(jm),colnames(jm)),order(rownames(jm),colnames(jm))]
rownames(varcovMatrix) <- group[whichPeople]
colnames(varcovMatrix) <- pop[whichPeople]
varcovMatrix <- varcovMatrix[order(rownames(varcovMatrix),colnames(varcovMatrix)),order(rownames(varcovMatrix),colnames(varcovMatrix))]
hc <- hclust(as.dist(max(jm)-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations")
plotHeatmap(jaccardMatrix,title="Genetic Similarity Matrix")
plotHeatmap(varcovMatrix,title="Varcov GSM")
jaccardMatrix[1:5,1:5]
results <- readRDS("~/1000GP/plots/s_distributions/plotdata/STU_ITU_data.rds")
jaccardMatrix[1:5,1:5]
jaccardMatrix <- results$s_matrix_dip
jaccardMatrix[1:5,1:5]
# after sourcing files from masterAssociations.R
library(ggplot2)
library(reshape2)
require(gridExtra)
getSampleSubset <- function(subpops){
if("all"%in%subpops){
sampleSubset <- rep(T,length(pop))
} else {
sampleSubset <- pop %in% subpops
}
}
generateggplotDF <- function(jaccard.correction, varcov.correction, sampleSubset, components=c(1,2)){
components.df <- data.frame(row.names=sampleIDs[sampleSubset])
components.df$JaccardVector1 <- jaccard.correction[,components[1]]
components.df$JaccardVector2 <- jaccard.correction[,components[2]]
components.df$VarcovVector1 <- varcov.correction[,components[1]]
components.df$VarcovVector2 <- varcov.correction[,components[2]]
components.df$pop <- pop[sampleSubset]
components.df$group <- group[sampleSubset]
components.df
}
plotPCAsSideBySide <-  function(components.df){
jaccardPlot <- ggplot(components.df, aes(x = JaccardVector1, y = JaccardVector2)) + ggtitle("Our method") + geom_point(aes(color=factor(pop))) + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE)
varcovPlot <-  ggplot(components.df, aes(x = VarcovVector1, y = VarcovVector2))   + ggtitle("PCA (Variance)") + geom_point(aes(color=factor(pop))) + ylab("Component 2")+ xlab("Component 1")
grid.arrange(jaccardPlot, varcovPlot, ncol=2,top = "Principal Component Plots")
}
withinVsBetween <-  function(components.df){
ind <- t(combn(nrow(components.df),2))
comparison <- t(combn(pop[sampleSubset],2))
inGroup <- comparison[,1]==comparison[,2]
jaccardDist <- apply(ind, 1, function(x) sqrt((components.df[x[1], 1]-components.df[x[2], 1])^2 + (components.df[x[1], 2]-components.df[x[2], 2])^2))
varianceDist <- apply(ind, 1, function(x) sqrt((components.df[x[1], 3]-components.df[x[2], 3])^2 + (components.df[x[1], 4]-components.df[x[2], 4])^2))
jaccardRatio <- mean(jaccardDist[inGroup])/mean(jaccardDist[!inGroup])
varianceRatio <-mean(varianceDist[inGroup])/mean(varianceDist[!inGroup])
c("jaccard"=jaccardRatio, "variance"=varianceRatio)
}
####################################
####################################
####################################
sampleSubset <- getSampleSubset(c("ITU","STU"))
sampleSubset
eigen(jaccardMatrix)
sampleSubset <- getSampleSubset("all")
sampleSubset
jaccard.correction <- eigen(jaccardMatrix[sampleSubset,sampleSubset])$vectors
jaccard.correction <- eigen(jaccardMatrix)$vectors
varcov.correction <- eigen(varcovMatrix)$vectors
components.df <- generateggplotDF(jaccard.correction, varcov.correction, sampleSubset, c(3,2))
sampleSubset
sampleSubset <- T
jaccard.correction <- eigen(jaccardMatrix[sampleSubset,sampleSubset])$vectors
varcov.correction <- eigen(varcovMatrix[sampleSubset,sampleSubset])$vectors
components.df <- generateggplotDF(jaccard.correction, varcov.correction, sampleSubset, c(3,2))
sampleSubset <- T
jaccard.correction <- eigen(jaccardMatrix[sampleSubset,sampleSubset])$vectors
varcov.correction <- eigen(varcovMatrix[sampleSubset,sampleSubset])$vectors
sampleSubset <- getSampleSubset(c("ITU","STU"))
components.df <- generateggplotDF(jaccard.correction, varcov.correction, sampleSubset, c(3,2))
plotPCAsSideBySide(components.df)
components.df <- generateggplotDF(jaccard.correction, varcov.correction, sampleSubset, c(1,2))
plotPCAsSideBySide(components.df)
head(components.df)
plotPCAsSideBySide <-  function(components.df){
jaccardPlot <- ggplot(components.df, aes(x = JaccardVector1, y = JaccardVector2)) +
ggtitle("Our method") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() +
geom_point(aes(color=factor(pop)))
varcovPlot <-  ggplot(components.df, aes(x = VarcovVector1, y = VarcovVector2))   +
ggtitle("PCA (Variance)")  + ylab("Component 2")+ xlab("Component 1") + theme_bw() +
geom_point(aes(color=factor(pop)))
grid.arrange(jaccardPlot, varcovPlot, ncol=2,top = "Principal Component Plots")
}
plotPCAsSideBySide(components.df)
plotPCAsSideBySide <-  function(components.df){
jaccardPlot <- ggplot(components.df, aes(x = JaccardVector1, y = JaccardVector2)) +
ggtitle("Our method") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() +
geom_point(aes(color=factor(pop)), size=10, alpha=.8)
varcovPlot <-  ggplot(components.df, aes(x = VarcovVector1, y = VarcovVector2))   +
ggtitle("PCA (Variance)")  + ylab("Component 2")+ xlab("Component 1") + theme_bw() +
geom_point(aes(color=factor(pop)), size=10, alpha=.8)
grid.arrange(jaccardPlot, varcovPlot, ncol=2,top = "Principal Component Plots")
}
plotPCAsSideBySide(components.df)
plotPCAsSideBySide <-  function(components.df){
jaccardPlot <- ggplot(components.df, aes(x = JaccardVector1, y = JaccardVector2)) +
ggtitle("Our method") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() +
geom_point(aes(color=factor(pop)), size=5, alpha=.8)
varcovPlot <-  ggplot(components.df, aes(x = VarcovVector1, y = VarcovVector2))   +
ggtitle("PCA (Variance)")  + ylab("Component 2")+ xlab("Component 1") + theme_bw() +
geom_point(aes(color=factor(pop)), size=5, alpha=.8)
grid.arrange(jaccardPlot, varcovPlot, ncol=2,top = "Principal Component Plots")
}
plotPCAsSideBySide(components.df)
head(components.df)
class(components.df)
library(data.table)
components.dt <- data.table(components.df)
components.dt
?data.table
components.dt <- data.table(components.df,keep.rownames=T)
components.dt
components.dt <- data.table(rbind(components.df[,-2:-3],components.df[,-1:-2]),keep.rownames=T)
rbind(components.df[,-2:-3],components.df[,-1:-2])
head(components.df[,-2:-3])
rbind(components.df[,-2:-3],components.df[,-1:-2])
head(components.df[,-1:-2])
jaccard.correction
dim(jaccard.correction)
generateggplotDF <- function(jaccard.correction, varcov.correction, sampleSubset, components=c(1,2)){
components.df <- data.frame(row.names=sampleIDs[sampleSubset])
components.df$Vector1 <- c(jaccard.correction[,components[1]],varcov.correction[,components[1]])
components.df$Vector2 <- c(jaccard.correction[,components[2]],varcov.correction[,components[2]])
#   components.df$VarcovVector1 <-
#   components.df$VarcovVector2 <- varcov.correction[,components[2]]
components.df$pop <- pop[sampleSubset]
components.df$group <- group[sampleSubset]
components.df$method <- c(rep("Ours",sum(sampleSubset)),rep("varcov",sum(sampleSubset)))
data.table(components.df)
}
generateggplotDT <- function(jaccard.correction, varcov.correction, sampleSubset, components=c(1,2)){
components.df <- data.frame(row.names=sampleIDs[sampleSubset])
components.df$Vector1 <- c(jaccard.correction[,components[1]],varcov.correction[,components[1]])
components.df$Vector2 <- c(jaccard.correction[,components[2]],varcov.correction[,components[2]])
#   components.df$VarcovVector1 <-
#   components.df$VarcovVector2 <- varcov.correction[,components[2]]
components.df$pop <- pop[sampleSubset]
components.df$group <- group[sampleSubset]
components.df$method <- c(rep("Ours",sum(sampleSubset)),rep("varcov",sum(sampleSubset)))
data.table(components.df)
}
components.dt <- generateggplotDT(jaccard.correction, varcov.correction, sampleSubset, c(1,2))
generateggplotDT <- function(jaccard.correction, varcov.correction, sampleSubset, components=c(1,2)){
components.df <- data.frame(row.names=sampleIDs[sampleSubset])
components.df$Vector1 <- c(jaccard.correction[,components[1]],varcov.correction[,components[1]])
components.df$Vector2 <- c(jaccard.correction[,components[2]],varcov.correction[,components[2]])
#   components.df$VarcovVector1 <-
#   components.df$VarcovVector2 <- varcov.correction[,components[2]]
components.df$pop <- rep(pop[sampleSubset],2)
components.df$group <- rep(group[sampleSubset],2)
components.df$method <- c(rep("Ours",sum(sampleSubset)),rep("varcov",sum(sampleSubset)))
data.table(components.df)
}
components.dt <- generateggplotDT(jaccard.correction, varcov.correction, sampleSubset, c(1,2))
generateggplotDT <- function(jaccard.correction, varcov.correction, sampleSubset, components=c(1,2)){
components.df <- data.frame(rep(row.names=sampleIDs[sampleSubset]),2)
components.df$Vector1 <- c(jaccard.correction[,components[1]],varcov.correction[,components[1]])
components.df$Vector2 <- c(jaccard.correction[,components[2]],varcov.correction[,components[2]])
#   components.df$VarcovVector1 <-
#   components.df$VarcovVector2 <- varcov.correction[,components[2]]
components.df$pop <- rep(pop[sampleSubset],2)
components.df$group <- rep(group[sampleSubset],2)
components.df$method <- c(rep("Ours",sum(sampleSubset)),rep("varcov",sum(sampleSubset)))
data.table(components.df, keep.rownames = T)
}
components.dt <- generateggplotDT(jaccard.correction, varcov.correction, sampleSubset, c(1,2))
components.df <- data.frame(rep(row.names=sampleIDs[sampleSubset]),2)
generateggplotDT <- function(jaccard.correction, varcov.correction, sampleSubset, components=c(1,2)){
components.df <- data.frame(rep(row.names=sampleIDs[sampleSubset],2))
components.df$Vector1 <- c(jaccard.correction[,components[1]],varcov.correction[,components[1]])
components.df$Vector2 <- c(jaccard.correction[,components[2]],varcov.correction[,components[2]])
#   components.df$VarcovVector1 <-
#   components.df$VarcovVector2 <- varcov.correction[,components[2]]
components.df$pop <- rep(pop[sampleSubset],2)
components.df$group <- rep(group[sampleSubset],2)
components.df$method <- c(rep("Ours",sum(sampleSubset)),rep("varcov",sum(sampleSubset)))
data.table(components.df, keep.rownames = T)
}
components.dt <- generateggplotDT(jaccard.correction, varcov.correction, sampleSubset, c(1,2))
components.df <- data.frame(rep(row.names=sampleIDs[sampleSubset],2))
components.df
generateggplotDT <- function(jaccard.correction, varcov.correction, sampleSubset, components=c(1,2)){
components.df <- data.frame(row.names=rep(sampleIDs[sampleSubset],2))
components.df$Vector1 <- c(jaccard.correction[,components[1]],varcov.correction[,components[1]])
components.df$Vector2 <- c(jaccard.correction[,components[2]],varcov.correction[,components[2]])
#   components.df$VarcovVector1 <-
#   components.df$VarcovVector2 <- varcov.correction[,components[2]]
components.df$pop <- rep(pop[sampleSubset],2)
components.df$group <- rep(group[sampleSubset],2)
components.df$method <- c(rep("Ours",sum(sampleSubset)),rep("varcov",sum(sampleSubset)))
data.table(components.df, keep.rownames = T)
}
components.dt <- generateggplotDT(jaccard.correction, varcov.correction, sampleSubset, c(1,2))
generateggplotDT <- function(jaccard.correction, varcov.correction, sampleSubset, components=c(1,2)){
components.df <- data.frame(samples=rep(sampleIDs[sampleSubset],2))
components.df$Vector1 <- c(jaccard.correction[,components[1]],varcov.correction[,components[1]])
components.df$Vector2 <- c(jaccard.correction[,components[2]],varcov.correction[,components[2]])
#   components.df$VarcovVector1 <-
#   components.df$VarcovVector2 <- varcov.correction[,components[2]]
components.df$pop <- rep(pop[sampleSubset],2)
components.df$group <- rep(group[sampleSubset],2)
components.df$method <- c(rep("Ours",sum(sampleSubset)),rep("varcov",sum(sampleSubset)))
data.table(components.df, keep.rownames = T)
}
components.dt <- generateggplotDT(jaccard.correction, varcov.correction, sampleSubset, c(1,2))
components.dt
jaccardPlot <- ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8)
jaccardPlot
jaccardPlot <- ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text(label=samples)
components.dt
jaccardPlot <- ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text(aes(label=samples))
components.dt
hist(components.dt[,"Vector1"])
hist(components.dt[,"Vector1",with=F])
components.dt[,"Vector1"]
components.dt[,3,with=F]
mean(components.dt[,3,with=F])
hist(varcov.correction[,1])
hist(varcov.correction[,2])
hist(varcov.correction[,3])
hist(varcov.correction[,4])
mean(varcov.correction[,4])
colMeans(varcov.correction)
histcolMeans(varcov.correction))
hist(colMeans(varcov.correction))
?eigen
hist(colMeans(varcov.correction))
hist(colMeans(jaccard.correction))
eg <- eigen(jaccardMatrix[sampleSubset,sampleSubset])
eg <- eigen(jaccardMatrix)
class(eg)
names(eg)
length(eg$values)
length(eg$vectors)
plotPCAsSideBySide(components.dt)
plotPCAsSideBySide <-  function(components.dt){
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text(aes(label=samples, x))
#   varcovPlot <-  ggplot(components.df, aes(x = VarcovVector1, y = VarcovVector2))   +
#       ggtitle("PCA (Variance)")  + ylab("Component 2")+ xlab("Component 1") + theme_bw() +
#       geom_point(aes(color=factor(pop)), size=5, alpha=.8)
#   grid.arrange(jaccardPlot, varcovPlot, ncol=2,top = "Principal Component Plots")
}
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text(aes(label=samples, x))
components.dt
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text(aes(label=samples))
components.dt <- generateggplotDT(jaccard.correction, varcov.correction, sampleSubset, c(2,3))
plotPCAsSideBySide(components.dt)
plotPCAsSideBySide <-  function(components.dt){
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text(aes(label=samples))
}
plotPCAsSideBySide(components.dt)
library(ggrepel)
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text(aes(label=samples)) + geom_text_repel()
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(aes(label=samples))
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(aes(data=subset(components.dt,Vector1>.1), label=samples))
subset(components.dt,Vector1>.1)
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(aes(data=subset(components.dt,Vector1>.1), label=samples))
ggplot(components.dt, aes(x = Vector1, y = Vector2, label=samples)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(aes(data=subset(components.dt,Vector1>.1)))
ggplot(components.dt, aes(x = Vector1, y = Vector2, label=samples)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8)
ggplot(components.dt, aes(x = Vector1, y = Vector2, label=samples)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(aes(data=components.dt))
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(aes(data=subset(components.dt,Vector1>.1), x = Vector1, y = Vector2, label=samples))
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(data=subset(components.dt,Vector1>.1),aes( label=samples))
components.dt
mean(jaccardMatrix)
mean(varcovMatrix)
mean(scale(jaccardMatrix))
?scale
jaccard.correction <- eigen(scale(jaccardMatrix[sampleSubset,sampleSubset]))$vectors
jaccard.correction <- eigen(scale(jaccardMatrix))$vectors
varcov.correction <- eigen(scale(varcovMatrix))$vectors
components.dt <- generateggplotDT(jaccard.correction, varcov.correction, sampleSubset, c(2,3))
plotPCAsSideBySide(components.dt)
plotPCAsSideBySide <-  function(components.dt){
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(data=subset(components.dt,Vector1>.1),aes( label=samples))
}
plotPCAsSideBySide(components.dt)
components.dt
jaccard.correction[1:5,1:5]
jaccard.correction <- eigen(jaccardMatrix)$vectors
varcov.correction <- eigen(varcovMatrix)$vectors
components.dt <- generateggplotDT(jaccard.correction, varcov.correction, sampleSubset, c(2,3))
plotPCAsSideBySide(components.dt)
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(data=subset(components.dt, Vector1>.1 |Vector2>.1 |),aes( label=samples))
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(data=subset(components.dt, Vector1>.1 |Vector2>.1 ),aes( label=samples))
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(data=subset(components.dt, Vector1>.1 | abs(Vector2)>.1 ),aes( label=samples))
plotPCAsSideBySide <-  function(components.dt){
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(data=subset(components.dt, Vector1>.1 | abs(Vector2)>.1 ),aes( label=samples))
}
components.dt <- generateggplotDT(jaccard.correction, varcov.correction, sampleSubset, c(1,3))
plotPCAsSideBySide(components.dt)
components.dt <- generateggplotDT(jaccard.correction, varcov.correction, sampleSubset, c(4,3))
plotPCAsSideBySide(components.dt)
components.dt <- generateggplotDT(jaccard.correction, varcov.correction, sampleSubset, c(2,4))
plotPCAsSideBySide(components.dt)
components.dt <- generateggplotDT(jaccard.correction, varcov.correction, sampleSubset, c(1,2))
plotPCAsSideBySide(components.dt)
components.dt <- generateggplotDT(jaccard.correction, varcov.correction, sampleSubset, c(2,3))
plotPCAsSideBySide(components.dt)
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method,labeller = c("ASD","ff")) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(data=subset(components.dt, Vector1>.1 | abs(Vector2)>.1 ),aes( label=samples))
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(data=subset(components.dt, Vector1>.1 | abs(Vector2)>.1 ),aes( label=samples))
plot_labeller <- function(variable,value){
c("Our Method","Variance-Covariance")[value]
}
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method, labeller=plot_labeller) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(data=subset(components.dt, Vector1>.1 | abs(Vector2)>.1 ),aes( label=samples))
components.dt
plot_labeller <- function(variable,value){
list(ours="Our Method",varcov="Variance-Covariance")[value]
}
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method, labeller=plot_labeller) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(data=subset(components.dt, Vector1>.1 | abs(Vector2)>.1 ),aes( label=samples))
plot_labeller <- function(variable,value){
list(Ours="Our Method",varcov="Variance-Covariance")[value]
}
ggplot(components.dt, aes(x = Vector1, y = Vector2)) +
ggtitle("Principal Component Plots") + ylab("Component 2")+ xlab("Component 1") + guides(colour=FALSE) + theme_bw() + facet_grid(.~method, labeller=plot_labeller) +
geom_point(aes(color=factor(pop)), size=5, alpha=.8) + geom_text_repel(data=subset(components.dt, Vector1>.1 | abs(Vector2)>.1 ),aes( label=samples))
