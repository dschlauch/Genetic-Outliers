print(median(s_matrix_hap[row(s_matrix_hap)!=col(s_matrix_hap)]))
estimatedKinship <- (s_matrix_hap-1)/(pkweightsMean-1)
genotypes <- as.matrix(genotypes)
numberOfLines <- 5002
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F)[,filterhap,with=F])
numSamples <- ncol(genotypes)
numVariants <- nrow(genotypes)
sumVariants <- rowSums(genotypes)
# reverse so that MAF<.5
genotypes[sumVariants>(numSamples/2),] <- 1-genotypes[sumVariants>(numSamples/2),]
# Intelligently LD prune
numblocks <- numVariants/ldPrune +1
blocks <- rep(1:numblocks, each=ldPrune)[1:numVariants]
genotypes <- genotypes[, .SD[which.min(abs(rowSums(.SD)-10))], by=blocks]
genotypes[,blocks:=NULL]
# remove < n variants
sumVariants <- rowSums(genotypes)
genotypes <- genotypes[sumVariants>minVariants,]
genotypes <- as.matrix(genotypes)
genotypes
print("Number of used variants")
print(nrow(genotypes))
numFilteredVariants <- nrow(genotypes)
sumFilteredVariants <- rowSums(genotypes)
varcovMat <- cov(genotypes[,c(T,F)] + genotypes[,c(F,T)])
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s_hap <- sum((1-p)/p)/(numFilteredVariants^2)
print("variance of s (haploid)")
print(var_s_hap)
# Calculate expected values conditional on kinship
pkweightsMean <- mean(((sumFilteredVariants-2)/numSamples)*weights)
kinships <- seq(0,.25,.001)
kinshipExpectation <- 1+kinships*(pkweightsMean-1)
s_matrix_numerator <- t(genotypes*weights)%*%genotypes
s_matrix_denominator <- numFilteredVariants
s_matrix_hap <- s_matrix_numerator/s_matrix_denominator
colnames(s_matrix_hap) <- hapsampleNames
rownames(s_matrix_hap) <- hapsampleNames
print(mean(s_matrix_hap[row(s_matrix_hap)!=col(s_matrix_hap)]))
print(median(s_matrix_hap[row(s_matrix_hap)!=col(s_matrix_hap)]))
estimatedKinship <- (s_matrix_hap-1)/(pkweightsMean-1)
s_matrix_hap[1:5,1:5]
library(ggplot2)
library(reshape2)
library(data.table)
genotypeFile <- "./data/combinedFiltered1000.gz"
numberOfLines <- 5000
minVariants <- 10
numCores <- 4
args<-commandArgs(TRUE)
outputDir <- '.'
gazalFilter <- "NA"
gazalFilter!="NA"
if(gazalFilter!="NA"){
gazal_filtered <- read.csv("./data/gazal_filtered.csv",stringsAsFactors=F)
gazal_filtered <- gazal_filtered[order(gazal_filtered[,1]),]
qcFilter <- gazal_filtered[,gazalFilter]=="YES"
} else {
qcFilter <- NULL
}
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
source('~/1000GP/s_matrix_functions.R')
pop_i<-"CEU"
genotypeFile <- "./data/1000GP_Phase3_chr10.hap.gz"
genotypeFile <- "./data/1000GP_Phase3_chr1.hap.gz"
filename
filename=genotypeFile
numberOfLines
numberOfLines<-100000
print(subpop)
subpop="CEU"
print(subpop)
if(is.null(qcFilter)){
filterhap <- hap.pop%in%subpop
filterdip <- pop%in%subpop
} else {
filterhap <- hap.pop%in%subpop & rep(qcFilter,each=2)
filterdip <- pop%in%subpop & qcFilter
}
hapsampleNames <- hap.sampleIDs[filterhap]
dipsampleNames <- sampleIDs[filterdip]
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F)[,filterhap,with=F])
filename="./data/combinedFiltered99.gz"
require(readr)
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F)[,filterhap,with=F])
filename="./data/combinedFiltered100.gz"
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F)[,filterhap,with=F])
numberOfLines=4069
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F)[,filterhap,with=F])
filename="./data/combinedFiltered1000.gz"
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F)[,filterhap,with=F])
filename="./data/combinedFiltered1000.gz"
filename="./data/combinedFiltered100.gz"
numberOfLines<-1000000
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
require(readr)
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
library(data.table)
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
filename
getwd()
numberOfLines
filename="./data/combinedFiltered1000.gz"
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=1000, header=F))
paste('zcat',filename)
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=1000, header=F))
filename="./data/combinedFiltered1000.gz"
numberOfLines=40695
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
library(data.table)
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
?fread
gazalFilter
gazal_filtered <- read.csv("./data/gazal_filtered.csv",stringsAsFactors=F)
gazal_filtered <- gazal_filtered[order(gazal_filtered[,1]),]
qcFilter <- gazal_filtered[,gazalFilter]=="YES"
names(gazal_filtered)
outputDir
outputDir <- "filtered1000"
pop
library(ggplot2)
library(reshape2)
library(data.table)
genotypeFile <- "./data/combinedFiltered1000.gz"
numberOfLines <- 5000
minVariants <- 10
numCores <- 4
args<-commandArgs(TRUE)
outputDir <- '.'
# gazalFilter <-"TGP2261"
gazalFilter <- "NA"
ldPrune <- 1
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
source('~/1000GP/s_matrix_functions.R')
resTableAll <- data.table(do.call(rbind, lapply(unique(pop),function(pop_i){
result <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/",pop_i, "_data.rds"))
result$s_matrix_dip[upper.tri(result$s_matrix_dip)] <- NA
diag(result$s_matrix_dip) <- NA
resTable <- melt(result$s_matrix_dip, na.rm=T)
resTable$estimatedCoK <- (resTable$value-1)/(result$pkweightsMean-1)
resTable$pop <- pop_i
colnames(resTable) <- c("SampleID_1","SampleID_2","s","CoK","pop")
resTable
})))
gazal_related <- read.csv("./data/gazal_related.csv")
gazal_related <- data.table(gazal_related)
gazal_related_rev <- copy(gazal_related)
setcolorder(gazal_related_rev, c(2,1,3,4,5))
names(gazal_related_rev)[1:2] <- names(gazal_related_rev)[2:1]
gazal_related <- rbind(gazal_related,gazal_related_rev)
names(gazal_related)[1:2] <- names(resTableAll)[1:2]
resTableAll <- merge(resTableAll,gazal_related, by=names(gazal_related)[1:2],all.x=T)
resTableAll[order(-CoK)]
sum(!is.na(resTableAll[,INFERED.RELATIONSHIP]))
resTableAll[SampleID_1=="HG00100"]
resTableAll[is.na(resTableAll[["INFERED.RELATIONSHIP"]]),"INFERED.RELATIONSHIP"]<- "Unrelated"
resTableAll$CombinedInfered <- "Unrelated"
resTableAll$CombinedInfered[resTableAll$INFERED.RELATIONSHIP=="CO"] <- "CO"
resTableAll$CombinedInfered[resTableAll$INFERED.RELATIONSHIP=="AV"|resTableAll$INFERED.RELATIONSHIP=="HS"] <- "AV or HS"
resTableAll$CombinedInfered[resTableAll$INFERED.RELATIONSHIP=="FS"|resTableAll$INFERED.RELATIONSHIP=="PO"] <- "FS or PO"
ggplot(resTableAll, aes(CombinedInfered, CoK)) +
geom_jitter(aes(alpha=(INFERED.RELATIONSHIP!="Unrelated")*.02)) + scale_x_discrete(limits=levels(resTableAll$INFERED.RELATIONSHIP)[c(6,2,1,4,3,5)])
ggplot(resTableAll, aes(INFERED.RELATIONSHIP, CoK)) +
geom_boxplot() + scale_x_discrete(limits=levels(resTableAll$INFERED.RELATIONSHIP)[c(6,2,1,4,3,5)]) +xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship")
result <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/",pop_i, "_data.rds"))
pop_i<-"CEU"
result <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/",pop_i, "_data.rds"))
dim(result$s_matrix_dip)
pop_i<-"ASW"
result <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/",pop_i, "_data.rds"))
dim(result$s_matrix_dip)
gazal_related
colnames(result$s_matrix_dip)==NA19625
colnames(result$s_matrix_dip)=="NA19625"
colnames(result$s_matrix_dip)=="NA20274"
is.na(gazalFilter)
gazalFilter!="NA"
gazalFilter
asd<-readRDS("~/Desktop/GBR_data.rds")
dim(asd$s_matrix_dip)
sum(pop==GBR)
sum(pop=="GBR")
outputDir <- '.'
outputDir <- 'filtered99_LD10'
resTableAll <- data.table(do.call(rbind, lapply(unique(pop),function(pop_i){
result <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/",pop_i, "_data.rds"))
result$s_matrix_dip[upper.tri(result$s_matrix_dip)] <- NA
diag(result$s_matrix_dip) <- NA
resTable <- melt(result$s_matrix_dip, na.rm=T)
resTable$estimatedCoK <- (resTable$value-1)/(result$pkweightsMean-1)
resTable$pop <- pop_i
colnames(resTable) <- c("SampleID_1","SampleID_2","s","CoK","pop")
resTable
})))
gazal_related <- read.csv("./data/gazal_related.csv")
gazal_related <- data.table(gazal_related)
gazal_related_rev <- copy(gazal_related)
setcolorder(gazal_related_rev, c(2,1,3,4,5))
names(gazal_related_rev)[1:2] <- names(gazal_related_rev)[2:1]
gazal_related <- rbind(gazal_related,gazal_related_rev)
names(gazal_related)[1:2] <- names(resTableAll)[1:2]
resTableAll <- merge(resTableAll,gazal_related, by=names(gazal_related)[1:2],all.x=T)
resTableAll[order(-CoK)]
sum(!is.na(resTableAll[,INFERED.RELATIONSHIP]))
resTableAll[SampleID_1=="HG00100"]
resTableAll[SampleID_1=="HG00100"]
resTableAll[is.na(resTableAll[["INFERED.RELATIONSHIP"]]),"INFERED.RELATIONSHIP"]<- "Unrelated"
resTableAll$CombinedInfered <- "Unrelated"
resTableAll$CombinedInfered[resTableAll$INFERED.RELATIONSHIP=="CO"] <- "CO"
resTableAll$CombinedInfered[resTableAll$INFERED.RELATIONSHIP=="AV"|resTableAll$INFERED.RELATIONSHIP=="HS"] <- "AV or HS"
resTableAll$CombinedInfered[resTableAll$INFERED.RELATIONSHIP=="FS"|resTableAll$INFERED.RELATIONSHIP=="PO"] <- "FS or PO"
ggplot(resTableAll, aes(CombinedInfered, CoK)) +
geom_jitter(aes(alpha=(INFERED.RELATIONSHIP!="Unrelated")*.02)) + scale_x_discrete(limits=levels(resTableAll$INFERED.RELATIONSHIP)[c(6,2,1,4,3,5)])
CombinedInfered
resTableAll
resTableAll[order(-CoK)]
ggplot(resTableAll, aes(INFERED.RELATIONSHIP, CoK)) +
geom_boxplot() + scale_x_discrete(limits=levels(resTableAll$INFERED.RELATIONSHIP)[c(6,2,1,4,3,5)]) +xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship")
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship")
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(alpha=.1) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship")
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(alpha=.1) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015")
pdf(paste0("./plots/s_distributions/",outputDir,"/EstimatedCoKvsGazal.pdf"), width=4, height=4)
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(alpha=.1) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015)")
dev.off()
pdf(paste0("./plots/s_distributions/",outputDir,"/EstimatedCoKvsGazal.pdf"), width=8, height=8)
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(alpha=.1) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015)")
dev.off()
popResults <- as.data.frame(t(sapply(unique(pop),function(pop_i){
result <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/",pop_i, "_data.rds"))
#     plotFromGSM(subpop=pop_i, gsm=result$s_matrix_dip, var_s=result$var_s_dip, pkweightsMean=result$pkweightsMean, "diploid", outputDir=outputDir)
s_vector <- result$s_matrix_dip[row(result$s_matrix_dip)>col(result$s_matrix_dip)]
topValuesKinship <- (sort(s_vector, decreasing=T)-1)/(result$weightsMean-1)
btest <- binom.test(sum(s_vector>mean(s_vector)), length(s_vector), alternative="less")
c(structurePValue=btest$p.value, var_s=result$var_s_dip, sampleVariance=var(s_vector))
})))
popResults$pop <- unique(pop)
ggplot(popResults, aes(y=structurePValue, x=pop))+ geom_point()
ggplot(popResults, aes(y=-log(structurePValue), x=pop))+ geom_point()
ggplot(popResults, aes(y=structurePValue, x=pop))+ geom_point()
structurePValue
popResults$structurePValue
outputDir<-"filtered99_TGP2261_LD10"
popResults <- as.data.frame(t(sapply(unique(pop),function(pop_i){
result <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/",pop_i, "_data.rds"))
plotFromGSM(subpop=pop_i, gsm=result$s_matrix_dip, var_s=result$var_s_dip, pkweightsMean=result$pkweightsMean, "diploid", outputDir=outputDir)
s_vector <- result$s_matrix_dip[row(result$s_matrix_dip)>col(result$s_matrix_dip)]
topValuesKinship <- (sort(s_vector, decreasing=T)-1)/(result$weightsMean-1)
btest <- binom.test(sum(s_vector>mean(s_vector)), length(s_vector), alternative="less")
c(structurePValue=btest$p.value, var_s=result$var_s_dip, sampleVariance=var(s_vector))
})))
popResults$pop <- unique(pop)
ggplot(popResults, aes(y=structurePValue, x=pop))+ geom_point()
ggplot(subset(popResults,!pop%in%c("PEL","MXL","ASW","PUR")), aes(y=var_s, x=sampleVariance, label=pop))+ geom_point(col="red", size=5) + geom_text(aes(y=var_s, x=sampleVariance))+ geom_abline() +
xlim(0,.005)+ylim(0,.005)
cor(subset(popResults,!pop%in%c("PEL","MXL","ASW","PUR"))$sampleVariance,subset(popResults,!pop%in%c("PEL","MXL","ASW","PUR"))$var_s)
varianceRatio <- popResults$sampleVariance/popResults$var_s
names(varianceRatio)<-popResults$pop
cbind(sort(varianceRatio, decreasing = TRUE))
sum(popResults$structurePValue<.01)
popResults$structurePValue[popResults$structurePValue<.01]
popResults$pop[popResults$structurePValue<.01]
popResults <- popResults[order(popResults$structurePValue),]
# generate summary table --------------------------------------------------
# outputDir <- "filtered1000_fixed_phi"
popResults <- as.data.frame(t(sapply(unique(pop),function(pop_i){
result <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/",pop_i, "_data.rds"))
s_vector <- result$s_matrix_dip[row(result$s_matrix_dip)>col(result$s_matrix_dip)]
plotFromGSM(subpop=pop_i, gsm=result$s_matrix_dip, var_s=var(s_vector), pkweightsMean=result$pkweightsMean, "diploid_samplevariance", outputDir=outputDir)
topValuesKinship <- (sort(s_vector, decreasing=T)-1)/(result$weightsMean-1)
btest <- binom.test(sum(s_vector>mean(s_vector)), length(s_vector), alternative="less")
c(structurePValue=btest$p.value, var_s=result$var_s_dip, sampleVariance=var(s_vector))
})))
cbind(sort(varianceRatio, decreasing = TRUE))
sum(popResults$structurePValue<.01)
popResults$structurePValue[popResults$structurePValue<.01]
popResults$pop[popResults$structurePValue<.01]
popResults <- popResults[order(popResults$structurePValue),]
popResults$pop
popResults$pop <- unique(pop)
popResults$pop[popResults$structurePValue<.01]
popResults <- popResults[order(popResults$structurePValue),]
popResults
popResults$structurePValue<
popResults$structurePValue
popResults$pop[popResults$structurePValue<.01]
popResults
popResults$structurePValue[popResults$structurePValue<.01]
popResults$structurePValue[popResults$structurePValue<.01,]
rownames(popResults)[popResults$structurePValue<.01]
rownames(popResults)[popResults$structurePValue<.05]
rownames(popResults)[popResults$structurePValue<.01]
outputDir
popResults <- popResults[order(popResults$structurePValue),]
popResults
popResults <- as.data.frame(t(sapply(unique(pop),function(pop_i){
result <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/",pop_i, "_data.rds"))
s_vector <- result$s_matrix_dip[row(result$s_matrix_dip)>col(result$s_matrix_dip)]
plotFromGSM(subpop=pop_i, gsm=result$s_matrix_dip, var_s=var(s_vector), pkweightsMean=result$pkweightsMean, "diploid_samplevariance", outputDir=outputDir)
topValuesKinship <- (sort(s_vector, decreasing=T)-1)/(result$weightsMean-1)
btest <- binom.test(sum(s_vector>mean(s_vector)), length(s_vector), alternative="less")
c(structurePValue=btest$p.value, var_s=result$var_s_dip, sampleVariance=var(s_vector))
})))
ggplot(popResults, aes(y=structurePValue, x=pop))+ geom_point()
ggplot(subset(popResults,!pop%in%c("PEL","MXL","ASW","PUR")), aes(y=var_s, x=sampleVariance, label=pop))+ geom_point(col="red", size=5) + geom_text(aes(y=var_s, x=sampleVariance))+ geom_abline() +
xlim(0,.005)+ylim(0,.005)
cor(subset(popResults,!pop%in%c("PEL","MXL","ASW","PUR"))$sampleVariance,subset(popResults,!pop%in%c("PEL","MXL","ASW","PUR"))$var_s)
varianceRatio <- popResults$sampleVariance/popResults$var_s
names(varianceRatio)<-rownames(popResults)
cbind(sort(varianceRatio, decreasing = TRUE))
sum(popResults$structurePValue<.01)
popResults$structurePValue[popResults$structurePValue<.01]
rownames(popResults)[popResults$structurePValue<.01]
popResults <- popResults[order(popResults$structurePValue),]
popResults
rownames(popResults)[popResults$structurePValue<.01]
group
popResults$super <- group
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(alpha=.1) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015)")
dev.off()
library(ggplot2)
library(reshape2)
library(data.table)
genotypeFile <- "./data/combinedFiltered1000.gz"
numberOfLines <- 5000
minVariants <- 10
numCores <- 4
args<-commandArgs(TRUE)
outputDir <- '.'
# gazalFilter <-"TGP2261"
gazalFilter <- "NA"
ldPrune <- 1
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
source('~/1000GP/s_matrix_functions.R')
outputDir
outputDir<-"filtered99_TGP2261_LD10"
# Read in all the results. plot histograms.  Calculated structure p.value
popResults <- as.data.frame(t(sapply(unique(pop),function(pop_i){
result <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/",pop_i, "_data.rds"))
s_vector <- result$s_matrix_dip[row(result$s_matrix_dip)>col(result$s_matrix_dip)]
plotFromGSM(subpop=pop_i, gsm=result$s_matrix_dip, var_s=var(s_vector), pkweightsMean=result$pkweightsMean, "diploid_samplevariance", outputDir=outputDir)
topValuesKinship <- (sort(s_vector, decreasing=T)-1)/(result$weightsMean-1)
btest <- binom.test(sum(s_vector>mean(s_vector)), length(s_vector), alternative="less")
c(structurePValue=btest$p.value, var_s=result$var_s_dip, sampleVariance=var(s_vector))
})))
ggplot(popResults, aes(y=structurePValue, x=pop))+ geom_point()
ggplot(subset(popResults,!pop%in%c("PEL","MXL","ASW","PUR")), aes(y=var_s, x=sampleVariance, label=pop))+ geom_point(col="red", size=5) + geom_text(aes(y=var_s, x=sampleVariance))+ geom_abline() +
xlim(0,.005)+ylim(0,.005)
popResults
ggplot(popResults, aes(y=structurePValue, x=1))+ geom_point()
popResults$pop <- rownames(pop)
ggplot(popResults, aes(y=structurePValue, x=pop))+ geom_point()
popResults
rownames(pop)
popResults$pop <- rownames(popResults)
ggplot(popResults, aes(y=structurePValue, x=pop))+ geom_point()
ggplot(popResults, aes(y=structurePValue, x=pop))+ geom_point() + geom_hline(.05)
ggplot(popResults, aes(y=structurePValue, x=pop))+ geom_point() + geom_hline(yintercept=.05)
ggplot(popResults, aes(y=structurePValue, x=pop))+ geom_point() + geom_hline(yintercept=.05) + geom_hline(yintercept=.01)
ggplot(subset(popResults,!pop%in%c("PEL","MXL","ASW","PUR")), aes(y=var_s, x=sampleVariance, label=pop))+ geom_point(col="red", size=5) + geom_text(aes(y=var_s, x=sampleVariance))+ geom_abline() +
xlim(0,.005)+ylim(0,.005)
ggplot(popResults, aes(y=structurePValue, x=pop))+ geom_point() + geom_hline(yintercept=.05) + geom_hline(yintercept=.01)
table(pop,group)
melt(table(pop,group))
popGroup <- popGroup[value>0]
popGroup <- melt(table(pop,group))
popGroup <- popGroup[value>0]
popGroup <- popGroup[popGroup$value>0]
popGroup <- melt(table(pop,group))
head(popGroup)
popGroup <- popGroup[popGroup$value>0,]
popGroup
rownames(popGroup) <- popGroup$pop
popGroup[popResults$pop,"group"]
popResults$group <- popGroup[popResults$pop,"group"]
ggplot(popResults, aes(y=structurePValue, x=pop))+ geom_point(aes(color=group)) + geom_hline(yintercept=.05) + geom_hline(yintercept=.01) +
ggtitle("p-value for structure in each population")
pdf(paste0("./plots/s_distributions/",outputDir,"/pValueForPop.pdf"), width=8, height=8)
ggplot(popResults, aes(y=structurePValue, x=pop))+ geom_point(aes(color=group)) + geom_hline(yintercept=.05) + geom_hline(yintercept=.01) +
ggtitle("p-value for structure in each population")
dev.off()
pdf(paste0("./plots/s_distributions/",outputDir,"/pValueForPop.pdf"), width=8, height=8)
ggplot(popResults, aes(y=structurePValue, x=pop))+ geom_point(aes(color=group)) + geom_hline(yintercept=.05) + geom_hline(yintercept=.01) +
ggtitle("p-value for structure in each population") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dev.off()
resTableAll <- data.table(do.call(rbind, lapply(unique(pop),function(pop_i){
result <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/",pop_i, "_data.rds"))
result$s_matrix_dip[upper.tri(result$s_matrix_dip)] <- NA
diag(result$s_matrix_dip) <- NA
resTable <- melt(result$s_matrix_dip, na.rm=T)
resTable$estimatedCoK <- (resTable$value-1)/(result$pkweightsMean-1)
resTable$pop <- pop_i
colnames(resTable) <- c("SampleID_1","SampleID_2","s","CoK","pop")
resTable
})))
gazal_related <- read.csv("./data/gazal_related.csv")
gazal_related <- data.table(gazal_related)
gazal_related_rev <- copy(gazal_related)
setcolorder(gazal_related_rev, c(2,1,3,4,5))
names(gazal_related_rev)[1:2] <- names(gazal_related_rev)[2:1]
gazal_related <- rbind(gazal_related,gazal_related_rev)
names(gazal_related)[1:2] <- names(resTableAll)[1:2]
resTableAll <- merge(resTableAll,gazal_related, by=names(gazal_related)[1:2],all.x=T)
resTableAll[order(-CoK)]
sum(!is.na(resTableAll[,INFERED.RELATIONSHIP]))
resTableAll[SampleID_1=="HG00100"]
resTableAll[is.na(resTableAll[["INFERED.RELATIONSHIP"]]),"INFERED.RELATIONSHIP"]<- "Unrelated"
resTableAll$CombinedInfered <- "Unrelated"
resTableAll$CombinedInfered[resTableAll$INFERED.RELATIONSHIP=="CO"] <- "CO"
resTableAll$CombinedInfered[resTableAll$INFERED.RELATIONSHIP=="AV"|resTableAll$INFERED.RELATIONSHIP=="HS"] <- "AV or HS"
resTableAll$CombinedInfered[resTableAll$INFERED.RELATIONSHIP=="FS"|resTableAll$INFERED.RELATIONSHIP=="PO"] <- "FS or PO"
resTableAll
resTableAll$group <- popGroup[resTableAll$pop,"group"]
resTableAll
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(aes(color=group),alpha=.1) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015)")
dev.off()
geom_boxplot() + geom_jitter(aes(color=group),alpha=.1) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015)")
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(lpha=.1) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015)")
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(alpha=.1) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015)")
outputDir
outputDir <- "filtered99_LD10"
resTableAll <- data.table(do.call(rbind, lapply(unique(pop),function(pop_i){
result <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/",pop_i, "_data.rds"))
result$s_matrix_dip[upper.tri(result$s_matrix_dip)] <- NA
diag(result$s_matrix_dip) <- NA
resTable <- melt(result$s_matrix_dip, na.rm=T)
resTable$estimatedCoK <- (resTable$value-1)/(result$pkweightsMean-1)
resTable$pop <- pop_i
colnames(resTable) <- c("SampleID_1","SampleID_2","s","CoK","pop")
resTable
})))
gazal_related <- read.csv("./data/gazal_related.csv")
gazal_related <- data.table(gazal_related)
gazal_related_rev <- copy(gazal_related)
setcolorder(gazal_related_rev, c(2,1,3,4,5))
names(gazal_related_rev)[1:2] <- names(gazal_related_rev)[2:1]
gazal_related <- rbind(gazal_related,gazal_related_rev)
names(gazal_related)[1:2] <- names(resTableAll)[1:2]
resTableAll <- merge(resTableAll,gazal_related, by=names(gazal_related)[1:2],all.x=T)
resTableAll$group <- popGroup[resTableAll$pop,"group"]
resTableAll[order(-CoK)]
sum(!is.na(resTableAll[,INFERED.RELATIONSHIP]))
resTableAll[SampleID_1=="HG00100"]
resTableAll[is.na(resTableAll[["INFERED.RELATIONSHIP"]]),"INFERED.RELATIONSHIP"]<- "Unrelated"
resTableAll$CombinedInfered <- "Unrelated"
resTableAll$CombinedInfered[resTableAll$INFERED.RELATIONSHIP=="CO"] <- "CO"
resTableAll$CombinedInfered[resTableAll$INFERED.RELATIONSHIP=="AV"|resTableAll$INFERED.RELATIONSHIP=="HS"] <- "AV or HS"
resTableAll$CombinedInfered[resTableAll$INFERED.RELATIONSHIP=="FS"|resTableAll$INFERED.RELATIONSHIP=="PO"] <- "FS or PO"
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(alpha=.1) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015)")
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(aes(color="blue"), alpha=.1) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015)")
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(aes(color=group), alpha=.1) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015)")
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(aes(color=group), alpha=.3) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015)")
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(aes(color=group), alpha=1) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015)")
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(aes(color=group), alpha=.5) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015)")
pdf(paste0("./plots/s_distributions/",outputDir,"/EstimatedCoKvsGazal.pdf"), width=8, height=8)
ggplot(resTableAll, aes(CombinedInfered, CoK)) + theme_bw() +
geom_boxplot() + geom_jitter(aes(color=group), alpha=.5) + scale_x_discrete(limits=c("Unrelated","CO","AV or HS", "FS or PO")) +
xlab("Inferred Relationship (Gazal 2015)") + ylab("Estimated kinship") + ggtitle("Our estimated CoK vs Inferred Relationship (Gazal 2015)")
dev.off()
