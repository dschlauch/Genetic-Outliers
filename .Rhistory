#     rbinom(numVariants,1,simMAF)
# })
# Real data
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
source('~/1000GP/s_matrix_functions.R')
plotHeatmap(allSamplesGSM,title="s GSM")
source('~/1000GP/all_samples_HCL.R')
plotHeatmap(allSamplesGSM,title="s GSM")
as.dist
matrix(rnorm(25),nrow=5)
simMat <- matrix(rnorm(25),nrow=5)
simMat <- simMat + t(simMat)
simMat
as.distsimMat)
as.dist(simMat)
hc <- hclust(as.dist(1-simMat),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(simMat)*.1), labelCol)
heatmap.2(simMat, Rowv=d, Colv=d, dendrogram="none", trace="none", main=title, col="bluered",
labRow="",labCol="",key=FALSE, RowSideColors=colorCodes[rownames(simMat)], ColSideColors=colorCodesPop[colnames(simMat)],
#           lwid = c(1,10),lhei = c(.01,5), margins = c(5,10))
)
heatmap.2(simMat)
diag(simMat)
diag(simMat) <- 1
heatmap.2(simMat)
heatmap.2(as.dist(simMat))
diag(simMat) <- 4
heatmap.2(simMat)
heatmap.2(allSamplesGSM)
s.i.j <-readRDS("~/1000GP/plots/s_distributions/plotdata/allSamples_sij_700000.rds")
x<-allSamplesGSM
title="GSM"
subset=NA
if(is.na(subset)){
subset <- rep(T,nrow(x))
}
simMat <- as.matrix(x)[subset,subset]
diag(simMat)<-0
rownames(simMat) <- group[subset]
colnames(simMat) <- pop[subset]
rownames(simMat)
heatmap.2(simMat, Rowv=d, Colv=d, dendrogram="none", trace="none", main=title, col="bluered",
labRow="",labCol="",key=FALSE, RowSideColors=colorCodes[rownames(simMat)], ColSideColors=colorCodesPop[colnames(simMat)],
#           lwid = c(1,10),lhei = c(.01,5), margins = c(5,10))
)
library(gplots)
colorCodes <- c(AFR="red", AMR="green", EUR="blue", SAS="yellow", EAS="black")
colorCodesPop <- c("dodgerblue2","#E31A1C", # red
"green4",
"#6A3D9A", # purple
"#FF7F00", # orange
"black","gold1",
"skyblue2","#FB9A99", # lt pink
"palegreen2",
"#CAB2D6", # lt purple
"#FDBF6F", # lt orange
"gray70", "khaki2",
"maroon","orchid1","deeppink1","blue1","steelblue4",
"darkturquoise","green1","yellow4","yellow3",
"darkorange4","brown","black")
names(colorCodesPop)<-unique(pop)
labelCol <- function(x) {
if (is.leaf(x)) {
## fetch label
label <- attr(x, "label")
#     code <- substr(label, 1, 1)
## use the following line to reset the label to one letter code
# attr(x, "label") <- code
attr(x, "nodePar") <- list(lab.col=colorCodes[label])
}
return(x)
}
heatmap.2(simMat, Rowv=d, Colv=d, dendrogram="none", trace="none", main=title, col="bluered",
labRow="",labCol="",key=FALSE, RowSideColors=colorCodes[rownames(simMat)], ColSideColors=colorCodesPop[colnames(simMat)],
#           lwid = c(1,10),lhei = c(.01,5), margins = c(5,10))
)
colorCodesPop[colnames(simMat)]
length(colorCodesPop[colnames(simMat)])
heatmap.2(simMat, Rowv=d, Colv=d, dendrogram="none", trace="none", main=title, col="bluered",
labRow="",labCol="",key=FALSE, RowSideColors=colorCodes[rownames(simMat)], ColSideColors=colorCodesPop[colnames(simMat)],
#           lwid = c(1,10),lhei = c(.01,5), margins = c(5,10))
)
dim(simMat)
ncol(simMat)
hc <- hclust(as.dist(1-simMat),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(simMat)*.1), labelCol)
heatmap.2(simMat, Rowv=d, Colv=d, dendrogram="none", trace="none", main=title, col="bluered",
labRow="",labCol="",key=FALSE, RowSideColors=colorCodes[rownames(simMat)], ColSideColors=colorCodesPop[colnames(simMat)],
#           lwid = c(1,10),lhei = c(.01,5), margins = c(5,10))
)
heatmap.2(simMat, trace="none", main=title, col="bluered",
labRow="",labCol="",key=FALSE, RowSideColors=colorCodes[rownames(simMat)], ColSideColors=colorCodesPop[colnames(simMat)],
#           lwid = c(1,10),lhei = c(.01,5), margins = c(5,10))
)
print(subpop)
subpop="CEU"
print(subpop)
filename <- "./data/combinedFiltered1000.gz"
con <- file(filename, "rt")
#     system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
numberOfLines
numberOfLines=1069
system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
dim(genotypes)
cov(genotypes)
cov(genotypes))dim()
dim(cov(genotypes))
varcovMat <- cov(genotypes[,c(T,F)] +,c(F,T))
varcovMat <- cov(genotypes[,c(T,F)] + genotypes[,c(F,T)])
dim(varcovMat)
sum(hap.pop=="CEU")
sum(hap.pop=="BEB")
sum(hap.pop=="IBS")
source('~/1000GP/s_matrix_functions.R')
res <- calculateSMatrix(unique(pop), filename="./data/combinedFiltered1000.gz", numberOfLines=10000, minVariants=5)
library(ggplot2)
genotypeFile <- "./data/combinedFiltered1000.gz"
minVariants <- 10
args<-commandArgs(TRUE)
if(length(args)!=0){
genotypeFile <- args[1]
numberOfLines <- as.numeric(args[2])
minVariants <- as.numeric(args[3])
}
#### Simulated data
# simn <- 3000
# numVariants <- 100000
# sim.w.numerator <- 2*(2*simn-1)
# simMAF <- runif(numVariants,0,.5)
# genotypes <- sapply(1:simn,function(x){
#     rbinom(numVariants,1,simMAF)
# })
# Real data
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
source('~/1000GP/s_matrix_functions.R')
source('~/1000GP/all_samples_HCL.R')
res <- calculateSMatrix(unique(pop), filename="./data/combinedFiltered1000.gz", numberOfLines=5000, minVariants=5)
allSamplesGSM <- res['s_i_j']
varcovMat <- res['varcovMat']
plotHeatmap(allSamplesGSM,title="s GSM")
class(allSamplesGSM)
allSamplesGSM <- res[['s_i_j']
]
allSamplesGSM <- res[['s_i_j']]
varcovMat <- res[['varcovMat']]
plotHeatmap(allSamplesGSM, title="s GSM")
plotHeatmap(varcovMat,title="varcov GSM")
tiff('~/1000GP/plots/s_matrix.tiff', width=960, height=960)
plotHeatmap(allSamplesGSM, title="s GSM")
dev.off()
tiff('~/1000GP/plots/varcov_matrix.tiff', width=960, height=960)
plotHeatmap(varcovMat,title="varcov GSM")
dev.off()
source('~/1000GP/s_matrix_functions.R')
res <- calculateSMatrix(unique(pop), filename="./data/combinedFiltered1000.gz", numberOfLines=20000, minVariants=5)
allSamplesGSM <- res[['s_i_j']]
varcovMat <- res[['varcovMat']]
tiff('~/1000GP/plots/s_matrix.tiff', width=960, height=960)
plotHeatmap(allSamplesGSM, title="s GSM")
dev.off()
tiff('~/1000GP/plots/varcov_matrix.tiff', width=960, height=960)
plotHeatmap(varcovMat,title="varcov GSM")
dev.off()
res <- calculateSMatrix(unique(pop), filename="./data/combinedFiltered1000.gz", numberOfLines=20000, minVariants=50)
allSamplesGSM <- res[['s_i_j']]
varcovMat <- res[['varcovMat']]
tiff('~/1000GP/plots/s_matrix.tiff', width=960, height=960)
plotHeatmap(allSamplesGSM, title="s GSM")
dev.off()
tiff('~/1000GP/plots/varcov_matrix.tiff', width=960, height=960)
plotHeatmap(varcovMat,title="varcov GSM")
dev.off()
minVariants
numberOfLines
numberOfLines <- 200000
numberOfLines <- 20000
genotypeFile
calculateSMatrix(c("ITU","STU"), filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
group
pop['HG03998']
pop
pop[which(sampleIDs['HG03998'])
]
pop[which(sampleIDs['HG03998'])]
which(sampleIDs['HG03998'])
which(sampleIDs=='HG03998')
pop[which(sampleIDs=='HG03998')]
pop[which(sampleIDs=='HG03873')]
pop[which(sampleIDs=='HG03899')]
pop[which(sampleIDs=='HG03733')]
pop[which(sampleIDs=='HG003754')]
pop[which(sampleIDs=='HG03754')]
pop[which(sampleIDs=='HG03750')]
pop[which(sampleIDs=='HG03750')]
pop[which(sampleIDs=='HG03985')]
pop[which(sampleIDs=='HG03740')]
subset <- rep(T,2504)
jm <- varcovMat
diag(jm)<-0
rownames(jm) <- group[subset]
colnames(jm) <- pop[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
subset <- pop%in%c("STU","ITU")
jm <- as.matrix(varcovMat)[subset,subset]
diag(jm)<-0
rownames(jm) <- group[subset]
colnames(jm) <- pop[subset]
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
jm<-t(jm)
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
jm <- allSamplesGSM
jm <- as.matrix(jm)[subset,subset]
diag(jm)<-0
rownames(jm) <- group[subset]
colnames(jm) <- pop[subset]
jm<-t(jm)
hc <- hclust(as.dist(1-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
d
hc
hc <- hclust(as.dist(max(jm)-jm),method="average")
d <- dendrapply(as.dendrogram(hc, hang=max(jm)*.1), labelCol)
plot(d, main="Hierarchical Clustering across superpopulations", ylim=c(1-max(jm)*1.25,1))
max(jm)-jm
plot(d, main="Hierarchical Clustering across superpopulations")
hclplot <- function(jaccardMat, pop1, pop2, name){
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
jaccardMat <- jaccardMat[popsubset,popsubset]
diag(jaccardMat) <- 0
lowest.node <- max(jaccardMat)
hclObj <- as.dendrogram(hclust(as.dist(1-jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
}
rownames(jm)
colnames(jm)
hclplot(jm,"STU","ITU","test")
jaccardMat <-  jm
pop1 <- "ITU"
pop2 <- "STU"
name
name <- "test"
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
sample
jaccardMat<-allSamplesGSM
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
jaccardMat <- jaccardMat[popsubset,popsubset]
diag(jaccardMat) <- 0
lowest.node <- max(jaccardMat)
hclObj <- as.dendrogram(hclust(as.dist(1-jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
library(data.table)
library(ggplot2)
library(gplots)
library(RColorBrewer)
library(cluster)
library(dendextend)
hclObj <- as.dendrogram(hclust(as.dist(1-jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
?as.dist
hclObj <- as.dendrogram(hclust(as.dist(max(jaccardMat)-jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
hclObj <- as.dendrogram(hclust(as.dist((max(jaccardMat)-jaccardMat))/max(jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
hclplot(allSamplesGSM,"STU","ITU","test")
hclplot <- function(jaccardMat, pop1, pop2, name){
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
jaccardMat <- jaccardMat[popsubset,popsubset]
diag(jaccardMat) <- 0
lowest.node <- max(jaccardMat)
hclObj <- as.dendrogram(hclust(as.dist((max(jaccardMat)-jaccardMat))/max(jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
}
hclplot(allSamplesGSM,"STU","ITU","test")
hclplot(varcovMat,"STU","ITU","test")
jaccardMat <- varcovMat
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
jaccardMat <- jaccardMat[popsubset,popsubset]
diag(jaccardMat) <- 0
lowest.node <- max(jaccardMat)
hclObj <- as.dendrogram(hclust(as.dist((max(jaccardMat)-jaccardMat))/max(jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
jaccardMat
hclplot <- function(jaccardMat, pop1, pop2, name){
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
jaccardMat <- jaccardMat[popsubset,popsubset]
diag(jaccardMat) <- 0
lowest.node <- max(jaccardMat)
hclObj <- as.dendrogram(hclust(as.dist((max(jaccardMat)-jaccardMat)/max(jaccardMat)),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
}
hclplot(varcovMat,"STU","ITU","test")
hclplot(allSamplesGSM,"STU","ITU","test")
rownames(jaccardMat) <- sample[,2]
jaccardMat <- varcovMat
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
jaccardMat <- jaccardMat[popsubset,popsubset]
diag(jaccardMat) <- 0
lowest.node <- max(jaccardMat)
hclObj <- as.dendrogram(hclust(as.dist((max(jaccardMat)-jaccardMat)/max(jaccardMat)),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
lowest.node
hclplot <- function(jaccardMat, pop1, pop2, name){
rownames(jaccardMat) <- sample[,2]
popsubset <- grepl(pop1, rownames(jaccardMat))|grepl(pop2, rownames(jaccardMat))
jaccardMat <- jaccardMat[popsubset,popsubset]
diag(jaccardMat) <- 0
jaccardMat <- (max(jaccardMat)-jaccardMat)/max(jaccardMat)
lowest.node <- max(jaccardMat)
hclObj <- as.dendrogram(hclust(as.dist(jaccardMat),method="average"), hang=lowest.node*.1)
labels_colors(hclObj) <- c('red','blue')[as.numeric(as.factor(rownames(jaccardMat)))[order.dendrogram(hclObj)]]
plot(hclObj,ylim=c(1-lowest.node*1.25,1), main = paste0(pop1,', ',pop2,' Hierarchical Clustering\n', name), axes=FALSE)
}
hclplot(varcovMat,"STU","ITU","test")
hclplot(allSamplesGSM,"STU","ITU","test")
res <- readRDS('~/1000GP/plots/s_distributions/plotdata/allSamples_sij_80695')
res <- readRDS('~/1000GP/plots/s_distributions/plotdata/allSamples_sij_80695.rds')
allSamplesGSM <- res[['s_i_j']]
names(allSamplesGSM)
length(allSamplesGSM)
dim(allSamplesGSM)
allSamplesGSM <- res
hclplot(allSamplesGSM,"STU","ITU","test")
hclplot(allSamplesGSM,"STU","CEU","test")
hist(c(allSamplesGSM))
hist(c(varcovMat))
kmeans
kmeans(jaccardMat,k=2)
?kmeans
?pam
pam(allSamplesGSM, k=5, diss=T)
pam(10-allSamplesGSM, k=5, diss=T)
pam(10-varcovMat, k=5, diss=T)
?pam
summary(pam(10-varcovMat, k=5, diss=T))
plot(pam(10-varcovMat, k=5, diss=T))
calculateSMatrix <- function(subpop="CEU", filename="./data/combinedFiltered1000.gz", numberOfLines=10695, minVariants=5, alpha=.01){
print(subpop)
filename <- "./data/combinedFiltered1000.gz"
con <- file(filename, "rt")
#     system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
hap.sampleIDs.subset <- hap.sampleIDs[hap.pop%in%subpop]
sampleIDs.subset <- sampleIDs[pop%in%subpop]
close(con)
numSamples <- ncol(genotypes)
sumVariants <- rowSums(genotypes)
# reverse so that MAF<.5
genotypes[sumVariants>(numSamples/2),] <- 1-genotypes[sumVariants>(numSamples/2),]
sumVariants <- rowSums(genotypes)
# remove < n variants
genotypes <- genotypes[sumVariants>minVariants,]
print("Number of used variants")
print(nrow(genotypes))
numFilteredVariants <- nrow(genotypes)
sumFilteredVariants <- rowSums(genotypes)
varcovMat <- cov(genotypes[,c(T,F)] + genotypes[,c(F,T)])
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s <- sum((1-p)/p)/(numFilteredVariants^2)
print("variance of s")
print(var_s)
num_comparisons <- numSamples*(numSamples-1)/2
bonferroni_cutoff <- qnorm((1-alpha/(2*num_comparisons)), sd=sqrt(var_s)) + 1
s.i.j.numerator <- t(genotypes*weights)%*%genotypes
s.i.j.denominator <- numFilteredVariants
s.i.j <- s.i.j.numerator/s.i.j.denominator
print(mean(s.i.j[row(s.i.j)!=col(s.i.j)]))
print(median(s.i.j[row(s.i.j)!=col(s.i.j)]))
topValuesHap <- sort(s.i.j[row(s.i.j)>col(s.i.j)], decreasing=T)
print(t(sapply(1:10, function(x){
which(s.i.j==topValuesHap[x], arr.ind=T)[1,]
})))
topHapIndices <- sapply(1:10, function(x){
which(s.i.j==topValuesHap[x], arr.ind=T)[1,]
})
# This needed to prevent errors when there are no significant results
if (sum(topValuesHap[1:10]>bonferroni_cutoff)>0){
topHapIndices <- topHapIndices[,topValuesHap[1:10]>bonferroni_cutoff]
mappedTopHapHits <- matrix(hap.sampleIDs.subset[topHapIndices],nrow=2)
topHitsNamesHap <- apply(mappedTopHapHits,2,paste0,collapse="_")
topValuesHap <- topValuesHap[topValuesHap>bonferroni_cutoff]
topValuesHap <- head(topValuesHap,10)
} else {
topHitsNamesHap <- NA
topValuesHap <- 0
}
# Collapse to diploid
s.i.j.dip <- (s.i.j[c(T,F),c(T,F)] + s.i.j[c(F,T),c(T,F)] +s.i.j[c(T,F),c(F,T)] + s.i.j[c(F,T),c(F,T)])/4
print(mean(s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)]))
print(median(s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)]))
num_comparisons_dip <- choose(ncol(s.i.j.dip),2)
# very lazy variance estimate...
var_s_dip <- var_s/4
bonferroni_cutoff_dip <- qnorm((1-alpha)^(1/num_comparisons_dip), sd=sqrt(var_s_dip)) + 1
topValuesDip <- sort(s.i.j.dip[row(s.i.j.dip)>col(s.i.j.dip)], decreasing=T)
topDipIndices <- sapply(1:10, function(x){
which(s.i.j.dip==topValuesDip[x], arr.ind=T)[1,]
})
# This needed to prevent errors when there are no significant results
if (sum(topValuesDip[1:10]>bonferroni_cutoff_dip)>0){
topDipIndices <- topDipIndices[,topValuesDip[1:10]>bonferroni_cutoff_dip]
mappedTopDipHits <- matrix(sampleIDs.subset[topDipIndices],nrow=2)
topHitsNamesDip <- apply(mappedTopDipHits,2,paste0,collapse="_")
topValuesDip <- topValuesDip[topValuesDip>bonferroni_cutoff_dip]
topValuesDip <- head(topValuesDip,10)
} else {
topHitsNamesDip <- NA
topValuesDip <- 0
}
plotData <- data.frame(hap=(s.i.j[row(s.i.j)!=col(s.i.j)]))
hapPlot <- ggplot(plotData, aes(hap, col="blue")) + geom_histogram(color="red",binwidth=.02,fill=I("blue")) +
ggtitle(paste0(subpop,collapse="_")) +
theme(plot.title = element_text(size=80), axis.title.x = element_text(size = 10))+
xlab("s") + geom_vline(xintercept = bonferroni_cutoff, color="red", linetype="dotted") +
annotate("text", x=bonferroni_cutoff -.06, y=400, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons, digits=1)), color="red",angle = 90, size = 10, hjust = 0) +
annotate("text", x=topValuesHap, y=10, label=topHitsNamesHap,angle = 80, hjust=0, size = 10)
pdf(paste0("./plots/s_distributions/",paste0(subpop,collapse="_"),"haploid.pdf"), width=4, height=4)
print(hapPlot)
dev.off()
plotData <- data.frame(dip=s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)])
dipPlot <- ggplot(plotData, aes(dip, col="blue")) + geom_histogram(color="red",binwidth=.02,fill=I("blue")) +
ggtitle(paste0(subpop,collapse="_"))  +
theme(plot.title = element_text(size=80), axis.title.x = element_text(size = 10)) +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff_dip, color="red", linetype="dotted") +
annotate("text", x=bonferroni_cutoff_dip -.02, y=200, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons_dip, digits=1)), color="red", angle = 90, size = 10, hjust = 0) +
annotate("text", x=topValuesDip, y=10, label=topHitsNamesDip,angle = 80, hjust=0, size = 10)
pdf(paste0("./plots/s_distributions/",paste0(subpop,collapse="_"),"diploid.pdf"), width=4, height=4)
print(dipPlot)
dev.off()
saveRDS(s.i.j.dip, paste0("./plots/s_distributions/plotdata/",paste0(subpop,collapse="_"),"_sij.rds",collapse="_"))
list(s_i_j = s.i.j.dip, varcovMat=varcovMat)
}
library(ggplot2)
genotypeFile <- "./data/combinedFiltered1000.gz"
minVariants <- 10
args<-commandArgs(TRUE)
if(length(args)!=0){
genotypeFile <- args[1]
numberOfLines <- as.numeric(args[2])
minVariants <- as.numeric(args[3])
}
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
source('~/1000GP/s_matrix_functions.R')
source('~/1000GP/all_samples_HCL.R')
unique(pop)
calculateSMatrix(i, filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
numberOfLines <- 10000
minVariants=20
calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
source('~/1000GP/s_matrix_functions.R')
numberOfLines <- 1000
calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
source('~/1000GP/s_matrix_functions.R')
calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
source('~/1000GP/s_matrix_functions.R')
calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
abc <- calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
source('~/1000GP/s_matrix_functions.R')
abc <- calculateSMatrix(unique(pop)[1], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
unique(pop)
unique(pop)[2]
abc <- calculateSMatrix(unique(pop)[2], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
abc <- calculateSMatrix(unique(pop)[2], filename=genotypeFile, numberOfLines=numberOfLines*10, minVariants=minVariants)
unique(pop)
abc <- calculateSMatrix(unique(pop)[14], filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants)
abc <- calculateSMatrix(unique(pop)[14], filename=genotypeFile, numberOfLines=numberOfLines*20, minVariants=minVariants)
abc <- calculateSMatrix(unique(pop)[14], filename=genotypeFile, numberOfLines=numberOfLines*40, minVariants=minVariants)
source('~/1000GP/s_matrix_functions.R')
abc <- calculateSMatrix(unique(pop)[14], filename=genotypeFile, numberOfLines=numberOfLines*40, minVariants=minVariants)
