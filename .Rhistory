# remove < n variants
genotypes <- genotypes[sumVariants>minVariants,]
numFilteredVariants <- nrow(genotypes)
sumFilteredVariants <- rowSums(genotypes)
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
s.i.j.numerator <- t(genotypes*weights)%*%genotypes
s.i.j.denominator <- numFilteredVariants
s.i.j <- s.i.j.numerator/s.i.j.denominator
print(mean(s.i.j[row(s.i.j)!=col(s.i.j)]))
print(median(s.i.j[row(s.i.j)!=col(s.i.j)]))
topValues <- sort(s.i.j[row(s.i.j)>col(s.i.j)], decreasing=T)[1:3]
print(topValues)
print(which(s.i.j==topValues[1], arr.ind=T))
print(which(s.i.j==topValues[2], arr.ind=T))
print(which(s.i.j==topValues[3], arr.ind=T))
qplot(s.i.j[row(s.i.j)!=col(s.i.j)], binwidth=.02) + ggtitle(paste0("Distribution of s, population: ",subpop)) + xlab("s")
}
calculateSMatrix("CEU", numberOfLines=30000, minVariants=30)
source('~/1000GP/crypticness.R')
library(ggplot2)
source('~/1000GP/s_matrix_functions.R')
library(foreach)
library(doParallel)
num_cores <- 4 #detectCores() - 4
# Initiate cluster
if(!is.na(num_cores)){
cl <- makeCluster(num_cores)
registerDoParallel(cl)
}
res <- foreach(i=unique(pop)[1:4],.packages=c("ggplot2")) %dopar% {
calculateSMatrix(i, numberOfLines=20695, minVariants=10)
}
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
res <- foreach(i=unique(pop)[1:4],.packages=c("ggplot2")) %dopar% {
calculateSMatrix(i, numberOfLines=20695, minVariants=10)
}
subpop="CEU"
numberOfLines=500
minVariants=5
alpha=.05
print(subpop)
filename <- "./data/combinedFiltered1000.gz"
con <- file(filename, "rt")
#     system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
close(con)
numSamples <- ncol(genotypes)
sumVariants <- rowSums(genotypes)
# reverse so that MAF<.5
genotypes[sumVariants>(numSamples/2),] <- 1-genotypes[sumVariants>(numSamples/2),]
sumVariants <- rowSums(genotypes)
# remove < n variants
genotypes <- genotypes[sumVariants>minVariants,]
numFilteredVariants <- nrow(genotypes)
sumFilteredVariants <- rowSums(genotypes)
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s <- sum((1-p)/p)/(numFilteredVariants^2)
print("variance of s")
print(var_s)
alpha <- .05
num_comparisons <- numSamples*(numSamples-1)/2
bonferroni_cutoff <- qnorm((1-alpha)^(1/num_comparisons), sd=sqrt(var_s)) + 1
print("bonferroni_cutoff")
print(bonferroni_cutoff)
s.i.j.numerator <- t(genotypes*weights)%*%genotypes
s.i.j.denominator <- numFilteredVariants
s.i.j <- s.i.j.numerator/s.i.j.denominator
print(mean(s.i.j[row(s.i.j)!=col(s.i.j)]))
print(median(s.i.j[row(s.i.j)!=col(s.i.j)]))
topValues <- sort(s.i.j[row(s.i.j)>col(s.i.j)], decreasing=T)[1:40]
print(topValues)
print(t(sapply(1:10, function(x){
which(s.i.j==topValues[x], arr.ind=T)[1,]
})))
# Collapse to diploid
s.i.j.dip <- (s.i.j[c(T,F),c(T,F)] + s.i.j[c(F,T),c(T,F)] +s.i.j[c(T,F),c(F,T)] + s.i.j[c(F,T),c(F,T)])/4
print(mean(s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)]))
print(median(s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)]))
topValues <- sort(s.i.j.dip[row(s.i.j.dip)>col(s.i.j.dip)], decreasing=T)[1:40]
print(topValues)
print(t(sapply(1:10, function(x){
which(s.i.j.dip==topValues[x], arr.ind=T)[1,]
})))
num_comparisons_dip <- choose(ncol(s.i.j.dip),2)
# very lazy variance estimate...
var_s_dip <- var_s/4
bonferroni_cutoff_dip <- qnorm((1-alpha)^(1/num_comparisons_dip), sd=sqrt(var_s_dip)) + 1
plotData <- data.frame(hap=(s.i.j[row(s.i.j)!=col(s.i.j)]))
hapPlot <- ggplot(plotData, aes(hap)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of haploid s, population: ",paste0(subpop,collapse="_"))) + xlab("s") +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff, color="red") +
annotate("text", x=bonferroni_cutoff -.06, y=400, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons, digits=1)), color="red",angle = 90)
tiff(paste0("./plots/s_distributions/",paste0(subpop,collapse="_"),"haploid.tiff"))
print(hapPlot)
dev.off()
plotData <- data.frame(dip=s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)])
dipPlot <- ggplot(plotData, aes(dip)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of diploid s, population: ",paste0(subpop,collapse="_"))) +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff_dip, color="red") +
annotate("text", x=bonferroni_cutoff_dip -.02, y=200, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons_dip, digits=1)), color="red",angle = 90)
tiff(paste0("./plots/s_distributions/",paste0(subpop,collapse="_"),"diploid.tiff"))
print(dipPlot)
dev.off()
saveRDS(s.i.j, paste0("./plots/s_distributions/plotdata/",paste0(subpop,collapse="_"),"_sij.rds",collapse="_"))
print(dipPlot)
print(hapPlot)
sapply(1:10, function(x){
which(s.i.j==topValues[x], arr.ind=T)[1,]
})
topValues
which(s.i.j==topValues[x], arr.ind=T)[1,]
which(s.i.j==topValues[1], arr.ind=T)[1,]
which(s.i.j==topValues[1], arr.ind=T)
print(subpop)
filename <- "./data/combinedFiltered1000.gz"
con <- file(filename, "rt")
#     system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
close(con)
numSamples <- ncol(genotypes)
sumVariants <- rowSums(genotypes)
# reverse so that MAF<.5
genotypes[sumVariants>(numSamples/2),] <- 1-genotypes[sumVariants>(numSamples/2),]
sumVariants <- rowSums(genotypes)
# remove < n variants
genotypes <- genotypes[sumVariants>minVariants,]
numFilteredVariants <- nrow(genotypes)
sumFilteredVariants <- rowSums(genotypes)
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s <- sum((1-p)/p)/(numFilteredVariants^2)
print("variance of s")
print(var_s)
alpha <- .05
num_comparisons <- numSamples*(numSamples-1)/2
bonferroni_cutoff <- qnorm((1-alpha)^(1/num_comparisons), sd=sqrt(var_s)) + 1
s.i.j.numerator <- t(genotypes*weights)%*%genotypes
s.i.j.denominator <- numFilteredVariants
s.i.j <- s.i.j.numerator/s.i.j.denominator
print(mean(s.i.j[row(s.i.j)!=col(s.i.j)]))
print(median(s.i.j[row(s.i.j)!=col(s.i.j)]))
topValuesHap <- sort(s.i.j[row(s.i.j)>col(s.i.j)], decreasing=T)
topValuesHap <- topValuesHap[topValuesHap>bonferroni_cutoff]
print(t(sapply(1:10, function(x){
which(s.i.j==topValues[x], arr.ind=T)[1,]
})))
sapply(1:10, function(x){
which(s.i.j==topValues[x], arr.ind=T)[1,]
})
sapply(1:10, function(x){
which(s.i.j==topValuesHap[x], arr.ind=T)[1,]
})
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
topIndices <- sapply(1:10, function(x){
which(s.i.j==topValuesHap[x], arr.ind=T)[1,]
})
topIndices <- topIndices[,topValuesHap[1:10]>bonferroni_cutoff]
topIndices
bonferroni_cutoff
topValuesHap[1:10]
hap.sampleIDs.subset <- hap.sampleIDs[hap.pop%in%subpop]
hap.sampleIDs.subset
topIndices
mappedTopHits <- hap.sampleIDs.subset[topIndices]
mappedTopHits
mappedTopHits <- matrix(hap.sampleIDs.subset[topIndices],nrow=2)
mappedTopHits
sampleIDs.subset <- sampleIDs[pop%in%subpop]
topValuesDip <- sort(s.i.j.dip[row(s.i.j.dip)>col(s.i.j.dip)], decreasing=T)
topDipIndices <- sapply(1:10, function(x){
which(s.i.j==topValuesDip[x], arr.ind=T)[1,]
})
topValuesDip
topDipIndices <- sapply(1:10, function(x){
which(s.i.j.dip==topValuesDip[x], arr.ind=T)[1,]
})
topDipIndices
topDipIndices <- topDipIndices[,topValuesDip[1:10]>bonferroni_cutoff_dip]
mappedTopDipHits <- matrix(sampleIDs.subset[topDipIndices],nrow=2)
mappedTopDipHits <- matrix(sampleIDs.subset[topDipIndices],nrow=2)
mappedTopDipHits
topValuesDip
dipPlot <- ggplot(plotData, aes(dip)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of diploid s, population: ",paste0(subpop,collapse="_"))) +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff_dip, color="red") +
annotate("text", x=bonferroni_cutoff_dip -.02, y=200, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons_dip, digits=1)), color="red",angle = 90)+
annotate("text", x=(5:8), y=200, label=c("ad","43","fgg","vvv"))
print(dipPlot)
(1:4)[1:2]
(1:4)[1:1]
(1:4)[1:0]
range(4)
range(5)
range(1,4)
seq(1,4)
seq(1,0)
iter(0)
iter(2)
topValuesDip <- topValuesDip[topValuesDip>bonferroni_cutoff]
topValuesDip
topValuesDip <- sort(s.i.j.dip[row(s.i.j.dip)>col(s.i.j.dip)], decreasing=T)
topDipIndices <- sapply(1:10, function(x){
which(s.i.j.dip==topValuesDip[x], arr.ind=T)[1,]
})
topDipIndices <- topDipIndices[,topValuesDip[1:10]>bonferroni_cutoff_dip]
mappedTopDipHits <- matrix(sampleIDs.subset[topDipIndices],nrow=2)
topValuesDip
topValuesDip[1:10]
topValuesDip <- topValuesDip[topValuesDip>bonferroni_cutoff_dip]
topValuesDip
subset(1:10,4)
?subset
head(1:10,4)
head(1:10,0)
head(1:10,40)
topValuesDip <- head(topValuesDip,10)
topValuesDip
topValuesHap <- topValuesHap[topValuesHap>bonferroni_cutoff_dip]
topValuesHap <- head(topValuesHap,10)
topValuesHap
mappedTopDipHits
dipPlot <- ggplot(plotData, aes(dip)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of diploid s, population: ",paste0(subpop,collapse="_"))) +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff_dip, color="red") +
annotate("text", x=bonferroni_cutoff_dip -.02, y=200, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons_dip, digits=1)), color="red",angle = 90)+
annotate("text", x=topValuesDip, y=200, label=apply(mappedTopDipHits,2,paste0,collapse="_"))
print(dipPlot)
dipPlot <- ggplot(plotData, aes(dip)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of diploid s, population: ",paste0(subpop,collapse="_"))) +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff_dip, color="red") +
annotate("text", x=bonferroni_cutoff_dip -.02, y=200, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons_dip, digits=1)), color="red",angle = 90)+
annotate("text", x=topValuesDip, y=200, label=apply(mappedTopDipHits,2,paste0,collapse="_"),angle = 90)
print(dipPlot)
dipPlot <- ggplot(plotData, aes(dip)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of diploid s, population: ",paste0(subpop,collapse="_"))) +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff_dip, color="red") +
annotate("text", x=bonferroni_cutoff_dip -.02, y=200, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons_dip, digits=1)), color="red",angle = 90)+
annotate("text", x=topValuesDip, y=200, label=apply(mappedTopDipHits,2,paste0,collapse="_"),angle = 60)
print(dipPlot)
dipPlot <- ggplot(plotData, aes(dip)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of diploid s, population: ",paste0(subpop,collapse="_"))) +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff_dip, color="red") +
annotate("text", x=bonferroni_cutoff_dip -.02, y=200, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons_dip, digits=1)), color="red",angle = 90)+
annotate("text", x=topValuesDip, y=50, label=apply(mappedTopDipHits,2,paste0,collapse="_"),angle = 60)
print(dipPlot)
dipPlot <- ggplot(plotData, aes(dip)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of diploid s, population: ",paste0(subpop,collapse="_"))) +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff_dip, color="red") +
annotate("text", x=bonferroni_cutoff_dip -.02, y=200, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons_dip, digits=1)), color="red",angle = 90)+
annotate("text", x=topValuesDip, y=50, label=apply(mappedTopDipHits,2,paste0,collapse="_"),angle = 45)
print(dipPlot)
dipPlot <- ggplot(plotData, aes(dip)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of diploid s, population: ",paste0(subpop,collapse="_"))) +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff_dip, color="red") +
annotate("text", x=bonferroni_cutoff_dip -.02, y=200, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons_dip, digits=1)), color="red",angle = 90)+
annotate("text", x=topValuesDip, y=50, label=apply(mappedTopDipHits,2,paste0,collapse="_"),angle = 45, hjust=0)
print(dipPlot)
dipPlot <- ggplot(plotData, aes(dip)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of diploid s, population: ",paste0(subpop,collapse="_"))) +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff_dip, color="red") +
annotate("text", x=bonferroni_cutoff_dip -.02, y=200, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons_dip, digits=1)), color="red",angle = 90)+
annotate("text", x=topValuesDip, y=0, label=apply(mappedTopDipHits,2,paste0,collapse="_"),angle = 45, hjust=0)
print(dipPlot)
dipPlot <- ggplot(plotData, aes(dip)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of diploid s, population: ",paste0(subpop,collapse="_"))) +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff_dip, color="red") +
annotate("text", x=bonferroni_cutoff_dip -.02, y=200, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons_dip, digits=1)), color="red",angle = 90)+
annotate("text", x=topValuesDip, y=10, label=apply(mappedTopDipHits,2,paste0,collapse="_"),angle = 45, hjust=0)
print(dipPlot)
hapPlot <- ggplot(plotData, aes(hap)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of haploid s, population: ",paste0(subpop,collapse="_"))) + xlab("s") +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff, color="red") +
annotate("text", x=bonferroni_cutoff -.06, y=400, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons, digits=1)), color="red",angle = 90) +
annotate("text", x=topValuesHap, y=10, label=apply(mappedTopHapHits,2,paste0,collapse="_"),angle = 45, hjust=0)
topValuesHap <- sort(s.i.j[row(s.i.j)>col(s.i.j)], decreasing=T)
print(t(sapply(1:10, function(x){
which(s.i.j==topValuesHap[x], arr.ind=T)[1,]
})))
topHapIndices <- sapply(1:10, function(x){
which(s.i.j==topValuesHap[x], arr.ind=T)[1,]
})
topHapIndices <- topHapIndices[,topValuesHap[1:10]>bonferroni_cutoff]
mappedTopHapHits <- matrix(hap.sampleIDs.subset[topHapIndices],nrow=2)
topValuesHap <- topValuesHap[topValuesHap>bonferroni_cutoff_dip]
topValuesHap <- head(topValuesHap,10)
hapPlot <- ggplot(plotData, aes(hap)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of haploid s, population: ",paste0(subpop,collapse="_"))) + xlab("s") +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff, color="red") +
annotate("text", x=bonferroni_cutoff -.06, y=400, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons, digits=1)), color="red",angle = 90) +
annotate("text", x=topValuesHap, y=10, label=apply(mappedTopHapHits,2,paste0,collapse="_"),angle = 45, hjust=0)
print(hapPlot)
plotData <- data.frame(hap=(s.i.j[row(s.i.j)!=col(s.i.j)]))
hapPlot <- ggplot(plotData, aes(hap)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of haploid s, population: ",paste0(subpop,collapse="_"))) + xlab("s") +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff, color="red") +
annotate("text", x=bonferroni_cutoff -.06, y=400, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons, digits=1)), color="red",angle = 90) +
annotate("text", x=topValuesHap, y=10, label=apply(mappedTopHapHits,2,paste0,collapse="_"),angle = 45, hjust=0)
print(hapPlot)
hapPlot <- ggplot(plotData, aes(hap)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of haploid s, population: ",paste0(subpop,collapse="_"))) + xlab("s") +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff, color="red") +
annotate("text", x=bonferroni_cutoff -.06, y=400, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons, digits=1)), color="red",angle = 90) +
annotate("text", x=topValuesHap, y=10, label=apply(mappedTopHapHits,2,paste0,collapse="_"),angle = 80, hjust=0)
print(hapPlot)
hapPlot <- ggplot(plotData, aes(hap)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of haploid s, population: ",paste0(subpop,collapse="_"))) + xlab("s") +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff, color="red") +
annotate("text", x=bonferroni_cutoff -.06, y=400, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons, digits=1)), color="red",angle = 90) +
annotate("text", x=topValuesHap, y=10, label=apply(mappedTopHapHits,2,paste0,collapse="_"),angle = 60, hjust=0)
print(hapPlot)
hapPlot <- ggplot(plotData, aes(hap)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of haploid s, population: ",paste0(subpop,collapse="_"))) + xlab("s") +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff, color="red") +
annotate("text", x=bonferroni_cutoff -.06, y=400, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons, digits=1)), color="red",angle = 90) +
annotate("text", x=topValuesHap, y=10, label=apply(mappedTopHapHits,2,paste0,collapse="_"),angle = 80, hjust=0)
print(hapPlot)
source('~/1000GP/s_matrix_functions.R')
calculateSMatrix(c("CEU"), numberOfLines=10695, minVariants=20)
numberOfLines=5000
print(subpop)
filename <- "./data/combinedFiltered1000.gz"
con <- file(filename, "rt")
#     system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
hap.sampleIDs.subset <- hap.sampleIDs[hap.pop%in%subpop]
sampleIDs.subset <- sampleIDs[pop%in%subpop]
close(con)
numSamples <- ncol(genotypes)
sumVariants <- rowSums(genotypes)
# reverse so that MAF<.5
genotypes[sumVariants>(numSamples/2),] <- 1-genotypes[sumVariants>(numSamples/2),]
sumVariants <- rowSums(genotypes)
# remove < n variants
genotypes <- genotypes[sumVariants>minVariants,]
numFilteredVariants <- nrow(genotypes)
sumFilteredVariants <- rowSums(genotypes)
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s <- sum((1-p)/p)/(numFilteredVariants^2)
print("variance of s")
print(var_s)
alpha <- .05
num_comparisons <- numSamples*(numSamples-1)/2
bonferroni_cutoff <- qnorm((1-alpha)^(1/num_comparisons), sd=sqrt(var_s)) + 1
s.i.j.numerator <- t(genotypes*weights)%*%genotypes
s.i.j.denominator <- numFilteredVariants
s.i.j <- s.i.j.numerator/s.i.j.denominator
print(mean(s.i.j[row(s.i.j)!=col(s.i.j)]))
print(median(s.i.j[row(s.i.j)!=col(s.i.j)]))
topValuesHap <- sort(s.i.j[row(s.i.j)>col(s.i.j)], decreasing=T)
topValuesHap
print(t(sapply(1:10, function(x){
which(s.i.j==topValuesHap[x], arr.ind=T)[1,]
})))
topHapIndices <- sapply(1:10, function(x){
which(s.i.j==topValuesHap[x], arr.ind=T)[1,]
})
topHapIndices
topHapIndices <- topHapIndices[,topValuesHap[1:10]>bonferroni_cutoff]
topHapIndices
mappedTopHapHits <- matrix(hap.sampleIDs.subset[topHapIndices],nrow=2)
topValuesHap <- topValuesHap[topValuesHap>bonferroni_cutoff_dip]
topValuesHap
topValuesHap <- head(topValuesHap,10)
topValuesHap
s.i.j.dip <- (s.i.j[c(T,F),c(T,F)] + s.i.j[c(F,T),c(T,F)] +s.i.j[c(T,F),c(F,T)] + s.i.j[c(F,T),c(F,T)])/4
print(mean(s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)]))
print(median(s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)]))
num_comparisons_dip <- choose(ncol(s.i.j.dip),2)
# very lazy variance estimate...
var_s_dip <- var_s/4
bonferroni_cutoff_dip <- qnorm((1-alpha)^(1/num_comparisons_dip), sd=sqrt(var_s_dip)) + 1
topValuesDip <- sort(s.i.j.dip[row(s.i.j.dip)>col(s.i.j.dip)], decreasing=T)
topDipIndices <- sapply(1:10, function(x){
which(s.i.j.dip==topValuesDip[x], arr.ind=T)[1,]
})
topDipIndices <- topDipIndices[,topValuesDip[1:10]>bonferroni_cutoff_dip]
mappedTopDipHits <- matrix(sampleIDs.subset[topDipIndices],nrow=2)
topValuesDip <- topValuesDip[topValuesDip>bonferroni_cutoff_dip]
topValuesDip <- head(topValuesDip,10)
plotData <- data.frame(hap=(s.i.j[row(s.i.j)!=col(s.i.j)]))
hapPlot <- ggplot(plotData, aes(hap)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of haploid s, population: ",paste0(subpop,collapse="_"))) + xlab("s") +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff, color="red") +
annotate("text", x=bonferroni_cutoff -.06, y=400, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons, digits=1)), color="red",angle = 90) +
annotate("text", x=topValuesHap, y=10, label=apply(mappedTopHapHits,2,paste0,collapse="_"),angle = 80, hjust=0)
print(hapPlot)
plotData <- data.frame(dip=s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)])
dipPlot <- ggplot(plotData, aes(dip)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of diploid s, population: ",paste0(subpop,collapse="_"))) +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff_dip, color="red") +
annotate("text", x=bonferroni_cutoff_dip -.02, y=200, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons_dip, digits=1)), color="red",angle = 90)+
annotate("text", x=topValuesDip, y=10, label=apply(mappedTopDipHits,2,paste0,collapse="_"),angle = 45, hjust=0)
print(dipPlot)
numberOfLines=10695
minVariants=5
alpha=.05
print(subpop)
filename <- "./data/combinedFiltered1000.gz"
con <- file(filename, "rt")
#     system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
system.time(genotypes <- apply(do.call(cbind, strsplit(readLines(con, numberOfLines)," ")), 1,as.numeric)[,hap.pop%in%subpop])
hap.sampleIDs.subset <- hap.sampleIDs[hap.pop%in%subpop]
sampleIDs.subset <- sampleIDs[pop%in%subpop]
close(con)
numSamples <- ncol(genotypes)
sumVariants <- rowSums(genotypes)
# reverse so that MAF<.5
genotypes[sumVariants>(numSamples/2),] <- 1-genotypes[sumVariants>(numSamples/2),]
sumVariants <- rowSums(genotypes)
# remove < n variants
genotypes <- genotypes[sumVariants>minVariants,]
numFilteredVariants <- nrow(genotypes)
sumFilteredVariants <- rowSums(genotypes)
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s <- sum((1-p)/p)/(numFilteredVariants^2)
print("variance of s")
print(var_s)
alpha <- .05
num_comparisons <- numSamples*(numSamples-1)/2
bonferroni_cutoff <- qnorm((1-alpha)^(1/num_comparisons), sd=sqrt(var_s)) + 1
s.i.j.numerator <- t(genotypes*weights)%*%genotypes
s.i.j.denominator <- numFilteredVariants
s.i.j <- s.i.j.numerator/s.i.j.denominator
print(mean(s.i.j[row(s.i.j)!=col(s.i.j)]))
print(median(s.i.j[row(s.i.j)!=col(s.i.j)]))
topValuesHap <- sort(s.i.j[row(s.i.j)>col(s.i.j)], decreasing=T)
print(t(sapply(1:10, function(x){
which(s.i.j==topValuesHap[x], arr.ind=T)[1,]
})))
topHapIndices <- sapply(1:10, function(x){
which(s.i.j==topValuesHap[x], arr.ind=T)[1,]
})
topHapIndices <- topHapIndices[,topValuesHap[1:10]>bonferroni_cutoff]
mappedTopHapHits <- matrix(hap.sampleIDs.subset[topHapIndices],nrow=2)
topValuesHap <- topValuesHap[topValuesHap>bonferroni_cutoff_dip]
topValuesHap <- head(topValuesHap,10)
# Collapse to diploid
s.i.j.dip <- (s.i.j[c(T,F),c(T,F)] + s.i.j[c(F,T),c(T,F)] +s.i.j[c(T,F),c(F,T)] + s.i.j[c(F,T),c(F,T)])/4
print(mean(s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)]))
print(median(s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)]))
num_comparisons_dip <- choose(ncol(s.i.j.dip),2)
# very lazy variance estimate...
var_s_dip <- var_s/4
bonferroni_cutoff_dip <- qnorm((1-alpha)^(1/num_comparisons_dip), sd=sqrt(var_s_dip)) + 1
topValuesDip <- sort(s.i.j.dip[row(s.i.j.dip)>col(s.i.j.dip)], decreasing=T)
topDipIndices <- sapply(1:10, function(x){
which(s.i.j.dip==topValuesDip[x], arr.ind=T)[1,]
})
topDipIndices <- topDipIndices[,topValuesDip[1:10]>bonferroni_cutoff_dip]
mappedTopDipHits <- matrix(sampleIDs.subset[topDipIndices],nrow=2)
topValuesDip <- topValuesDip[topValuesDip>bonferroni_cutoff_dip]
topValuesDip <- head(topValuesDip,10)
plotData <- data.frame(hap=(s.i.j[row(s.i.j)!=col(s.i.j)]))
hapPlot <- ggplot(plotData, aes(hap)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of haploid s, population: ",paste0(subpop,collapse="_"))) + xlab("s") +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff, color="red") +
annotate("text", x=bonferroni_cutoff -.06, y=400, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons, digits=1)), color="red",angle = 90) +
annotate("text", x=topValuesHap, y=10, label=apply(mappedTopHapHits,2,paste0,collapse="_"),angle = 80, hjust=0)
tiff(paste0("./plots/s_distributions/",paste0(subpop,collapse="_"),"haploid.tiff"))
print(hapPlot)
dev.off()
plotData <- data.frame(dip=s.i.j.dip[row(s.i.j.dip)!=col(s.i.j.dip)])
dipPlot <- ggplot(plotData, aes(dip)) + geom_histogram(color="blue",binwidth=.02) +
ggtitle(paste0("Distribution of diploid s, population: ",paste0(subpop,collapse="_"))) +
xlab("s") + geom_vline(xintercept = bonferroni_cutoff_dip, color="red") +
annotate("text", x=bonferroni_cutoff_dip -.02, y=200, label=paste0("Multiple testing cutoff, p=",format(1/num_comparisons_dip, digits=1)), color="red",angle = 90)+
annotate("text", x=topValuesDip, y=10, label=apply(mappedTopDipHits,2,paste0,collapse="_"),angle = 45, hjust=0)
tiff(paste0("./plots/s_distributions/",paste0(subpop,collapse="_"),"diploid.tiff"))
print(dipPlot)
dev.off()
saveRDS(s.i.j, paste0("./plots/s_distributions/plotdata/",paste0(subpop,collapse="_"),"_sij.rds",collapse="_"))
saveRDS(s.i.j, paste0("./plots/s_distributions/plotdata/",paste0(subpop,collapse="_"),"_sij.rds",collapse="_"))
saveRDS(s.i.j, paste0("./plots/s_distributions/plotdata/",paste0(subpop,collapse="_"),"_sij.rds",collapse="_"))
source('~/1000GP/s_matrix_functions.R')
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
source('~/1000GP/s_matrix_functions.R')
calculateSMatrix(c("CEU"), numberOfLines=10695, minVariants=20)
source('~/1000GP/s_matrix_functions.R')
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
source('~/1000GP/s_matrix_functions.R')
library(ggplot2)
calculateSMatrix(c("CEU"), numberOfLines=10695, minVariants=20)
