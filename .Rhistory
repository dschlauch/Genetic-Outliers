plot(sort(pValues[,1]),(1:nrow(pValues))/nrow(pValues), pch='.')
qlot(sort(pValues[,1]),(1:nrow(pValues))/nrow(pValues), pch='.')
library(ggplot2)
qlot(sort(pValues[,1]),(1:nrow(pValues))/nrow(pValues), pch='.')
qplot(sort(pValues[,1]),(1:nrow(pValues))/nrow(pValues), pch='.')
qplot(sort(pValues[,1]),(1:nrow(pValues))/nrow(pValues), pch='.') +abline(0,1)
library(ggplot2)
library(reshape2)
library(data.table)
library(gtools)
library(grid)
simResults <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data.rds"))
outputDir <- '.'
simResults <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data.rds"))
getPopResults <- function(results){
as.data.table(t(sapply(names(results), function(pop_i){
s_vector <- sort(results[[pop_i]]$s_matrix_hap[row(results[[pop_i]]$s_matrix_hap)>col(results[[pop_i]]$s_matrix_hap)], decreasing=T)
topKinship <- (s_vector[1]-1)/(results[[pop_i]]$pkweightsMean-1)
btest <- binom.test(sum(s_vector>mean(s_vector)), length(s_vector), alternative="less")
structureKSTest <- ks.test((s_vector-1)/sqrt(results[[pop_i]]$var_s_hap), "pnorm", alternative = c("less"))$p.value
crypticSig <- ifelse((s_vector[1]-1)/sqrt(results[[pop_i]]$var_s_hap) > qnorm(1-.005/length(s_vector)), "YES+",
ifelse((s_vector[1]-1)/sqrt(results[[pop_i]]$var_s_hap) > qnorm(1-.025/length(s_vector)),"YES","NO"))
structureSig <- ifelse(structureKSTest<.01, "YES+",ifelse(structureKSTest<.05,"YES","NO"))
c(structurePValue=btest$p.value, var_s=results[[pop_i]]$var_s_hap, sampleVariance=var(s_vector),
structureKSTest=structureKSTest, closestRelatives=topKinship, crypticSig=crypticSig, structureSig=structureSig)
})), keep.rownames=T)
}
simPopResults <- getPopResults(simResults)
pValues <- sapply(names(results), function(pop_i){
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(results[[pop_i]]$var_s_hap))
crypticPValue
})
pValues <- sapply(names(simResults), function(pop_i){
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(results[[pop_i]]$var_s_hap))
crypticPValue
})
pValues <- sapply(simResults, function(res){
s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(results[[pop_i]]$var_s_hap))
crypticPValue
})
pValues <- sapply(simResults, function(res){
s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_hap))
crypticPValue
})
length(pValues)
qplot(sort(pValues[,1]),(1:nrow(pValues))/nrow(pValues), pch='.') +abline(0,1)
library(ggplot2)
qplot(sort(pValues[,1]),(1:nrow(pValues))/nrow(pValues), pch='.') +abline(0,1)
qplot(sort(pValues[,1]),(1:nrow(pValues))/nrow(pValues), pch='.')
qplot(sort(pValues[,1]),(1:nrow(pValues))/nrow(pValues), pch='.') + geom_abline(0,1)
qplot(sort(pValues[,1]),(1:nrow(pValues))/nrow(pValues), pch='.') + geom_abline(intercept=0,slope=1)
qplot(log(sort(pValues[,1])),log(1:nrow(pValues))/nrow(pValues), pch='.') + geom_abline(intercept=0,slope=1) +
ggtitle("")
qplot(-log(sort(pValues[,1])),-log(1:nrow(pValues))/nrow(pValues), pch='.') + geom_abline(intercept=0,slope=1) +
ggtitle("")
pValues[1:5]
-log(pValues[1:5])
min(-log(sort(pValues[,1])))
max(-log(sort(pValues[,1])))
qplot(-log(sort(pValues[,1])),-log((1:nrow(pValues))/nrow(pValues)), pch='.') + geom_abline(intercept=0,slope=1) +
ggtitle("")
dim(pValues)
pValues[1:3,]
qplot(-log(rowMeans(pValues)),-log((1:nrow(pValues))/nrow(pValues)), pch='.') + geom_abline(intercept=0,slope=1) +
ggtitle("")
qplot(-log(rowMeans(pValues)),-log((1:nrow(pValues))/nrow(pValues)), pch='.') + geom_abline(intercept=0,slope=1) +
ggtitle("")
qplot(-log(rowMeans(pValues)),-log((1:nrow(pValues))/nrow(pValues)), pch='.') + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population")
qplot(-log((1:nrow(pValues))/nrow(pValues),-log(rowMeans(pValues))), pch='.') + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab()
qplot(-log((1:nrow(pValues))/nrow(pValues),-log(rowMeans(pValues)))) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab()
qplot(-log((1:nrow(pValues))/nrow(pValues),-log(rowMeans(pValues)))) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMeans(pValues))) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMeans(pValues)), col="blue") + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMeans(pValues))) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
dim(genotypes)
nVariants <- 100000
numSimulatedSamples=200
numSimulations=10
cok=.0625
nVariants <- 100000
genotypes <- data.table(matrix(rbinom(numSimulatedSamples*nVariants,1,.1), ncol=numSimulatedSamples))
dim(genotypes)
relatedSample <- rbinom(nVariants,1,.1)
relatedSample[rbinom(nVariants, 1, cok)==1] <- genotypes[,1,with=F]
length(relatedSample)
genotypes := relatedSample
genotypes[,Related := relatedSample ]
dim(genotypes)
genotypes
nVariants <- 100000
genotypes <- data.table(matrix(rbinom(numSimulatedSamples*nVariants,1,.1), ncol=numSimulatedSamples))
results <- list()
genotypes <- genotypes[, 1:numSimulatedSamples, with=F]
print(i)
dim(genotypes)
genotypes <- data.table(t(apply(genotypes,1, sample)))
cbind(genotypes,relatedSample)
dim(genotypes)
genotypes[,Related := NA ]
dim(genotypes)
genotypes
print(i)
genotypes[,Related:=NULL]
genotypes
genotypes <- data.table(t(apply(genotypes,1, sample)))
relatedSample <- rbinom(nVariants,1,.1)
relatedSample[rbinom(nVariants, 1, cok)==1] <- genotypes[,1,with=F]
genotypes[,Related := relatedSample ]
names(genotypes)[1:numSimulatedSamples] <- paste0("Sample",1:numSimulatedSamples)
genotypes
ibdVariants <- rbinom(nVariants, 1, cok)==1
ibdVariants
relatedSample[ibdVariants] <- genotypes[ibdVariants,1,with=F]
genotypes[,Related := relatedSample ]
genotypes
relatedSample
genotypes[ibdVariants,1,with=F]
length(genotypes[ibdVariants,1,with=F])
dim(genotypes[ibdVariants,1,with=F])
length(genotypes[[1]])
relatedSample[ibdVariants] <- genotypes[[1]][ibdVariants]
genotypes[,Related := relatedSample ]
genotypes
relatedSample
length(genotypes[[1]][ibdVariants])
length(relatedSample[ibdVariants])
ibdVariants
relatedSample[ibdVariants] <- genotypes[[1]][ibdVariants]
length(relatedSample)
relatedSample
genotypes[[1]][ibdVariants]
class(genotypes[[1]][ibdVariants])
class(relatedSample[ibdVariants])
relatedSample <- rbinom(nVariants,1,.1)
class(relatedSample[ibdVariants])
relatedSample <- rbinom(nVariants,1,.1)
ibdVariants <- rbinom(nVariants, 1, cok)==1
relatedSample[ibdVariants] <- genotypes[[1]][ibdVariants]
relatedSample
genotypes[,Related := relatedSample ]
genotypes
relatedSample <- rbinom(nVariants,1,.1)
ibdVariants <- rbinom(nVariants, 1, cok)==1
relatedSample[ibdVariants] <- genotypes[[1]][ibdVariants]
genotypes[,Related := relatedSample ]
genotypes
relatedSample <- rbinom(nVariants,1,.1)
ibdVariants <- rbinom(nVariants, 1, cok)==1
relatedSample[ibdVariants] <- genotypes[[1]][ibdVariants]
genotypes[,Related := relatedSample ]
genotypes
relatedSample <- rbinom(nVariants,1,.1)
ibdVariants <- rbinom(nVariants, 1, cok)==1
relatedSample[ibdVariants] <- genotypes[[1]][ibdVariants]
genotypes[,Related := relatedSample ]
genotypes
relatedSample
names(genotypes)[1:numSimulatedSamples] <- paste0("Sample",1:numSimulatedSamples)
genotypes
source('~/1000GP/s_matrix_functions.R')
system.time(results <- homogeneousSimulations(200, 20, minVariants=5))
nVariants <- 100000
genotypes <- data.table(matrix(rbinom(numSimulatedSamples*nVariants,1,.1), ncol=numSimulatedSamples))
results <- list()
genotypes <- genotypes[, 1:numSimulatedSamples, with=F]
genotypes[,Related := NA ]
print(i)
genotypes[,Related:=NULL]
genotypes <- data.table(t(apply(genotypes,1, sample)))
relatedSample <- rbinom(nVariants,1,.1)
ibdVariants <- rbinom(nVariants, 1, cok)==1
relatedSample[ibdVariants] <- genotypes[[1]][ibdVariants]
genotypes[,Related := relatedSample ]
names(genotypes)[1:numSimulatedSamples] <- paste0("Sample",1:numSimulatedSamples)
results[[paste0("Simulated",i)]] <- generateSResultsFromGenotypes(paste0("Simulated",i), genotypes, qcFilter, minVariants, ldPrune)
ldPrune <- 1
minVariants<-5
qcFilter=NULL
results[[paste0("Simulated",i)]] <- generateSResultsFromGenotypes(paste0("Simulated",i), genotypes, qcFilter, minVariants, ldPrune)
genotypesSubpop <- genotypes
subpop <- "sss"
names(genotypesSubpop) <- make.unique(names(genotypesSubpop))
numSamples <- ncol(genotypesSubpop)
numVariants <- nrow(genotypesSubpop)
sumVariants <- rowSums(genotypesSubpop)
numSamples
numVariants
sumVariants
genotypesSubpop[sumVariants>(numSamples/2),] <- 1-genotypesSubpop[sumVariants>(numSamples/2),]
genotypesSubpop
sumVariants <- rowSums(genotypesSubpop)
sumVariants
numblocks <- numVariants/ldPrune +1
blocks <- rep(1:numblocks, each=ldPrune)[1:numVariants]
system.time(runningWhichMax <- running(sumVariants,width=ldPrune,fun=which.max, by=ldPrune))
prunedIndices <- runningWhichMax + seq(0,ldPrune*(length(runningWhichMax)-1),ldPrune)
system.time(genotypesSubpop <- genotypesSubpop[prunedIndices])
sumVariants <- rowSums(genotypesSubpop)
genotypesSubpop <- genotypesSubpop[sumVariants>minVariants,]
genotypesSubpop <- as.matrix(genotypesSubpop)
print("Number of used variants")
print(nrow(genotypesSubpop))
numFilteredVariants <- nrow(genotypesSubpop)
sumFilteredVariants <- rowSums(genotypesSubpop)
varcovMat <- cov(t(scale(t(genotypesSubpop[,c(T,F)] + genotypesSubpop[,c(F,T)]))))
genotypesSubpop
dim(genotypesSubpop[,c(T,F)])
relatedSamples <- matrix(rbinom(nVariants*2,1,.1), ncol=2)
ibdVariants <- rbinom(nVariants*2, 1, cok)==1
genotypes <- data.table(matrix(rbinom(numSimulatedSamples*nVariants,1,.1), ncol=numSimulatedSamples))
genotypes <- data.table(matrix(rbinom(numSimulatedSamples*nVariants,1,.1), ncol=numSimulatedSamples))
relatedSample <- genotypes[[numSimulatedSamples]]
relatedSample
ibdVariants <- rbinom(nVariants, 1, cok)==1
ibdVariants[1:5]
genotypes[[numSimulatedSamples]][ibdVariants] <- genotypes[[1]][ibdVariants]
source('~/1000GP/s_matrix_functions.R')
system.time(results <- homogeneousSimulations(200, 20, minVariants=5))
saveRDS(results, paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data_cok0625.rds"))
simResults <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data_cok0625.rds"))
getPopResults <- function(results){
as.data.table(t(sapply(names(results), function(pop_i){
s_vector <- sort(results[[pop_i]]$s_matrix_hap[row(results[[pop_i]]$s_matrix_hap)>col(results[[pop_i]]$s_matrix_hap)], decreasing=T)
topKinship <- (s_vector[1]-1)/(results[[pop_i]]$pkweightsMean-1)
btest <- binom.test(sum(s_vector>mean(s_vector)), length(s_vector), alternative="less")
structureKSTest <- ks.test((s_vector-1)/sqrt(results[[pop_i]]$var_s_hap), "pnorm", alternative = c("less"))$p.value
crypticSig <- ifelse((s_vector[1]-1)/sqrt(results[[pop_i]]$var_s_hap) > qnorm(1-.005/length(s_vector)), "YES+",
ifelse((s_vector[1]-1)/sqrt(results[[pop_i]]$var_s_hap) > qnorm(1-.025/length(s_vector)),"YES","NO"))
structureSig <- ifelse(structureKSTest<.01, "YES+",ifelse(structureKSTest<.05,"YES","NO"))
c(structurePValue=btest$p.value, var_s=results[[pop_i]]$var_s_hap, sampleVariance=var(s_vector),
structureKSTest=structureKSTest, closestRelatives=topKinship, crypticSig=crypticSig, structureSig=structureSig)
})), keep.rownames=T)
}
simPopResults <- getPopResults(simResults)
simPopResults
hist(as.numeric(simPopResults$structureKSTest))
pValues <- sapply(simResults, function(res){
s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_hap))
crypticPValue
})
library(ggplot2)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMeans(pValues))) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
dim(pValues)
head(pValues)
genotypes
cor(genotypes[,2,with=F])
cor(genotypes[,2,with=F], genotypes[,1,with=F])
cor(genotypes[,2,with=F], genotypes[,3,with=F])
cor(genotypes[,2,with=F], genotypes)
hist(cor(genotypes[,2,with=F], genotypes))
hist(cor(genotypes[,2,with=F], genotypes)[-1])
hist(cor(genotypes[,2,with=F], genotypes)[-2])
hist(cor(genotypes[,1,with=F], genotypes)[-2])
hist(cor(genotypes[,1,with=F], genotypes)[-1])
source('~/1000GP/s_matrix_functions.R')
system.time(results <- homogeneousSimulations(200, nVariants=10000, 20, minVariants=5))
source('~/1000GP/s_matrix_functions.R')
system.time(results <- homogeneousSimulations(200, nVariants=10000, 20, minVariants=5))
saveRDS(results, paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data_cok0625.rds"))
simResults <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data_cok0625.rds"))
getPopResults <- function(results){
as.data.table(t(sapply(names(results), function(pop_i){
s_vector <- sort(results[[pop_i]]$s_matrix_hap[row(results[[pop_i]]$s_matrix_hap)>col(results[[pop_i]]$s_matrix_hap)], decreasing=T)
topKinship <- (s_vector[1]-1)/(results[[pop_i]]$pkweightsMean-1)
btest <- binom.test(sum(s_vector>mean(s_vector)), length(s_vector), alternative="less")
structureKSTest <- ks.test((s_vector-1)/sqrt(results[[pop_i]]$var_s_hap), "pnorm", alternative = c("less"))$p.value
crypticSig <- ifelse((s_vector[1]-1)/sqrt(results[[pop_i]]$var_s_hap) > qnorm(1-.005/length(s_vector)), "YES+",
ifelse((s_vector[1]-1)/sqrt(results[[pop_i]]$var_s_hap) > qnorm(1-.025/length(s_vector)),"YES","NO"))
structureSig <- ifelse(structureKSTest<.01, "YES+",ifelse(structureKSTest<.05,"YES","NO"))
c(structurePValue=btest$p.value, var_s=results[[pop_i]]$var_s_hap, sampleVariance=var(s_vector),
structureKSTest=structureKSTest, closestRelatives=topKinship, crypticSig=crypticSig, structureSig=structureSig)
})), keep.rownames=T)
}
simPopResults <- getPopResults(simResults)
simPopResults
pValues <- sapply(simResults, function(res){
s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_hap))
crypticPValue
})
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMeans(pValues))) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
system.time(results <- homogeneousSimulations(200, nVariants=10000, 200, minVariants=5))
saveRDS(results, paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data_cok0625.rds"))
simResults <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data_cok0625.rds"))
simPopResults <- getPopResults(simResults)
simPopResults
hist(as.numeric(simPopResults$structureKSTest))
pValues <- sapply(simResults, function(res){
s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_hap))
crypticPValue
})
library(ggplot2)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMeans(pValues))) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
pValues <- sapply(simResults, function(res){
s_vector <- res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_hap))
crypticPValue
})
pValues <- sapply(simResults, function(res){
#     s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
s_vector <- res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)]
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_hap))
crypticPValue
})
pValues[200]
pValues[1:5]
res$s_matrix_hap[1:5,1:5]
simResults[[1]]$s_matrix_hap[1:5,1:5]
dim(pValues)
pValues[199]
pValues[199,]
pValues[198,]
pValues[199,]
related<-pValues[199,]
related
a<- apply(pValues[-199,], 2, sort, decreasing=T)
dim(a)
a <- rbind(related, apply(pValues[-199,], 2, sort, decreasing=T))
a[1:5,1L5]
a[1:5,1:5]
a <- rbind(related, apply(pValues[-199,], 2, sort))
a[1:5,1:5]
pValues <- rbind(related, apply(pValues[-199,], 2, sort))
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMeans(pValues))) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
rowMeans(pValues)[1:4]
(pValues)[1:4,1:5]
(pValues)[1:4,11:15]
plot(pValues[1,])
mean(pValues[1,])
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians(pValues))) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
rowMedians <- apply(pValues,1,median)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
rowMedians <- apply(pValues,1,median)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate(annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), label = "Some text"))
rowMedians <- apply(pValues,1,median)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate(annotate("text", x = -log(1/nrow(pValues)), y = 14, label = "Some text"))
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), label = "Some text"))
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), label = "Some text")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), hjust=1.5, label = "Some text")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), hjust=1, label = "Related Pair")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), hjust=1.1, label = "Related Pair")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), hjust=1.1, label = "Related Pair, Phi=.0625")
getwd()
pdf("./plots/simulatedQQ.pdf")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), hjust=1.1, label = "Related Pair, Phi=.0625")
dev.off()
choose(200,2)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), hjust=1.1, label = "Related Pair, Phi=.0625")
pdf("./plots/simulatedQQ.pdf")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), hjust=1.1, label = "Related Pair, Phi=.0625")
dev.off()
simResults <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data.rds"))
simPopResults <- getPopResults(simResults)
hist(as.numeric(simPopResults$structureKSTest))
simPopResults
pValues <- sapply(simResults, function(res){
#     s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
s_vector <- res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)]
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_hap))
crypticPValue
})
pValues <- apply(pValues, 2, sort)
rowMedians <- apply(pValues,1,median)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), hjust=1.1, label = "Related Pair, Phi=.0625")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
system.time(results <- homogeneousSimulations(200, nVariants=10000, cok=0.0, 200, minVariants=5))
saveRDS(results, paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data.rds"))
simResults <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data.rds"))
dim(simResults)
dim(results)
results
simPopResults <- getPopResults(simResults)
simPopResults
hist(as.numeric(simPopResults$structureKSTest))
pValues <- sapply(simResults, function(res){
#     s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
s_vector <- res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)]
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_hap))
crypticPValue
})
pValues <- apply(pValues, 2, sort)
rowMedians <- apply(pValues,1,median)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
rowMedians <- apply(pValues,1,mean)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), hjust=1.1, label = "Related Pair, Phi=.0625")
qplot((1:nrow(pValues))/nrow(pValues),rowMedians) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
pValues <- apply(pValues[,1:15], 2, sort)
rowMedians <- apply(pValues,1,mean)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
pValues <- apply(pValues[,5], 2, sort)
pValues <- apply(pValues[,6], 2, sort)
pValues <- apply(pValues[,5:6], 2, sort)
rowMedians <- apply(pValues,1,mean)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
cok=.0
numSimulations=10
nVariants=10000
numSimulatedSamples=200
results <- list()
genotypes <- genotypes[, 1:numSimulatedSamples, with=F]
genotypes
homogeneousSimulations
for(i in 1:numSimulations){
print(i)
genotypes <- data.table(matrix(rbinom(numSimulatedSamples*nVariants,1,.1), ncol=numSimulatedSamples))
ibdVariants <- rbinom(nVariants, 1, cok)==1
genotypes[[numSimulatedSamples]][ibdVariants] <- genotypes[[1]][ibdVariants]
#         genotypes[, Related := relatedSample]
names(genotypes)[1:numSimulatedSamples] <- paste0("Sample",1:numSimulatedSamples)
results[[paste0("Simulated",i)]] <- generateSResultsFromGenotypes(paste0("Simulated",i), genotypes, qcFilter, minVariants, ldPrune)
}
results
for(i in 1:numSimulations){
print(i)
genotypes <- data.table(matrix(rbinom(numSimulatedSamples*nVariants,1,.1), ncol=numSimulatedSamples))
if(is.na(cok)){
} else {
ibdVariants <- rbinom(nVariants, 1, cok)==1
genotypes[[numSimulatedSamples]][ibdVariants] <- genotypes[[1]][ibdVariants]
#         genotypes[, Related := relatedSample]
}
names(genotypes)[1:numSimulatedSamples] <- paste0("Sample",1:numSimulatedSamples)
results[[paste0("Simulated",i)]] <- generateSResultsFromGenotypes(paste0("Simulated",i), genotypes, qcFilter, minVariants, ldPrune)
}
source('~/1000GP/s_matrix_functions.R')
system.time(results <- homogeneousSimulations(200, nVariants=100000, cok=NA, 200, minVariants=5))
system.time(results <- homogeneousSimulations(200, nVariants=100000, cok=NA, 100, minVariants=5))
saveRDS(results, paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data.rds"))
simResults <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data.rds"))
simPopResults <- getPopResults(simResults)
simPopResults
hist(as.numeric(simPopResults$structureKSTest))
pValues <- sapply(simResults, function(res){
#     s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
s_vector <- res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)]
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_hap))
crypticPValue
})
pValues <- apply(pValues, 2, sort)
dim(pValues)
rowMedians <- apply(pValues,1,mean)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
pdf("./plots/simulatedQQ.pdf")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), hjust=1.1, label = "Related Pair, Phi=.0625")
dev.off()
pdf("./plots/simulatedQQ.pdf")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") \
dev.off()
pdf("./plots/simulatedQQ.pdf")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)")
dev.off()
