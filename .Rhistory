geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair")
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair")
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair")
cok
simResults <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_",cok,"data.rds"))
length(simResults)
names(simResults)
object.size(powerSimulationResult)
library(ggplot2)
library(reshape2)
library(data.table)
library(gtools)
library(grid)
source('~/1000GP/s_matrix_functions.R')
kinshipCoefs <- seq(0,.0625,.0025)
numSimulatedSamples <- 20
nVariants <- 10000
numSimulations <- 10
minVariants <- 5
outputDir <- '.'
numCores <- 4
kinshipStart <- 0
kinshipEnd <- .05
kinshipSeq <- .0025
kinshipCoefs <- seq(kinshipStart,kinshipEnd,kinshipSeq)
kinshipCoefs
powerSimulationResult <- lapply(kinshipCoefs, function(cok){
system.time(simResults <- homogeneousSimulations(numSimulatedSamples=numSimulatedSamples, nVariants=nVariants, cok=cok, numSimulations=numSimulations, minVariants=minVariants, numCores=numCores, outputDir=outputDir))
#     saveRDS(results, paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_",cok,"data.rds"))
print(cok)
#     simResults <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_",cok,"data.rds"))
nSamples <- ncol(simResults[[1]]$s_matrix_hap)
varS <- simResults[[1]]$var_s_hap
expectedS <- (1-cok) + cok*(.1*choose(nSamples,2)/(choose(.1*(nSamples-2)+2,2)))
simTable <- getPopResults(simResults)
simTable$cok <- cok
list(combinedSimTable=simTable, expectedS=expectedS, nSamples=nSamples, varS=varS)
})
powerSimulationResult
saveRDS(powerSimulationResult, paste0("./plots/s_distributions/",outputDir,"/plotdata/SimulationResults.rds"))
powerSimulationResult <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/SimulationResults.rds"))
powerSimulationResult
combinedSimTable <- do.call(rbind, lapply(powerSimulationResult, '[[',1))
expectedSvector <- unlist(lapply(powerSimulationResult, '[[',2))
nSamples <- unlist(lapply(powerSimulationResult, '[[',3))[1]
varSvector <- unlist(lapply(powerSimulationResult, '[[',4))
fwalpha <- .05
bonferroniAlpha <- fwalpha/choose(nSamples,2)
cutoff <- qnorm(1-bonferroniAlpha, mean=1,sd=sqrt(varSvector))
simPower <- fwalpha + (1-fwalpha)*pnorm(expectedSvector-cutoff, sd=sqrt(varSvector))
powerCurve <- combinedSimTable[, mean(crypticSig=="NO"), by=cok ]
powerCurve$typeIIError <- 1-simPower
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair")
library(ggplot2)
library(reshape2)
library(data.table)
library(gtools)
library(grid)
source('~/1000GP/s_matrix_functions.R')
outputDir
outputDir <- "powerSims400"
kinshipCoefs
kinshipStart <- 0
kinshipEnd <- .027
kinshipSeq <- .001
kinshipCoefs <- seq(kinshipStart,kinshipEnd,kinshipSeq)
kinshipCoefs
powerSimulationResult <- lapply(kinshipCoefs, function(cok){ readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_",cok,"_results.rds"))})
combinedSimTable <- do.call(rbind, lapply(powerSimulationResult, '[[',1))
expectedSvector <- unlist(lapply(powerSimulationResult, '[[',2))
nSamples <- unlist(lapply(powerSimulationResult, '[[',3))[1]
nSamples
varSvector <- unlist(lapply(powerSimulationResult, '[[',4))
fwalpha <- .05
bonferroniAlpha <- fwalpha/choose(nSamples,2)
cutoff <- qnorm(1-bonferroniAlpha, mean=1,sd=sqrt(varSvector))
simPower <- fwalpha + (1-fwalpha)*pnorm(expectedSvector-cutoff, sd=sqrt(varSvector))
powerCurve <- combinedSimTable[, mean(crypticSig=="NO"), by=cok ]
powerCurve$typeIIError <- 1-simPower
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair")
80000000/40
kinshipEnd <- .033
kinshipSeq <- .001
kinshipCoefs <- seq(kinshipStart,kinshipEnd,kinshipSeq)
powerSimulationResult <- lapply(kinshipCoefs, function(cok){ readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_",cok,"_results.rds"))})
combinedSimTable <- do.call(rbind, lapply(powerSimulationResult, '[[',1))
expectedSvector <- unlist(lapply(powerSimulationResult, '[[',2))
nSamples <- unlist(lapply(powerSimulationResult, '[[',3))[1]
varSvector <- unlist(lapply(powerSimulationResult, '[[',4))
fwalpha <- .05
bonferroniAlpha <- fwalpha/choose(nSamples,2)
cutoff <- qnorm(1-bonferroniAlpha, mean=1,sd=sqrt(varSvector))
simPower <- fwalpha + (1-fwalpha)*pnorm(expectedSvector-cutoff, sd=sqrt(varSvector))
powerCurve <- combinedSimTable[, mean(crypticSig=="NO"), by=cok ]
powerCurve$typeIIError <- 1-simPower
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair")
getwd()
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair")
dev.off()
pdf("./plots/powerCurve.pdf")
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair")
dev.off()
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair") +
theme(plot.title = element_text(size=10), axis.title.x = element_text(size = 10), axis.title.y = element_blank(), axis.text.y=element_blank()) +
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair") +
theme(plot.title = element_text(size=10), axis.title.x = element_text(size = 10), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair") +
theme(plot.title = element_text(size=40), axis.title.x = element_text(size = 10), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair") +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 10), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 10), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair expression(alpha)") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 10), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair expression(alpha)") + xlab(expression(alpha)) +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 10), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair expression(alpha)") + xlab(expression(phi)) +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle("Type II error vs relatedness of single pair expression(alpha)") + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
opts(title = "Type II error vs relatedness of single pair expression(alpha)") + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression("Type II error vs relatedness of single pair alpha")) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression("alphaType II error vs relatedness of single pair alpha")) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression("alpha")) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(bquote("Type II error vs relatedness of single pair alpha")) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(paste("Type II error vs relatedness of single pair", bquote(alpha))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(bquote(alpha)) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression("Type II error vs relatedness of single pair", bquote(alpha))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression(paste("Sampled values, ", mu, "=5, ", sigma,
"=1")))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression(paste("Sampled values, ", mu, "=5, ", sigma,
"=1"))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression(paste("Type II error vs relatedness of single pair", alpha))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression(paste("Type II error vs ", phi))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_blank(), axis.text.y=element_blank())
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression(paste("Type II error vs ", phi))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw()
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression(paste("Type II error vs ", phi))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=20), axis.title.x = element_text(size = 30), axis.title.y = element_text(size = 30))
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression(paste("Type II error vs ", phi))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=40), axis.title.x = element_text(size = 30), axis.title.y = element_text(size = 30))
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression(paste("Type II error vs ", phi))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=40), axis.title.x = element_text(size = 30), axis.title.y = element_text(size = 30), axis.text.x=element_text(size=20), axis.text.y=element_text(size=20))
pdf("./plots/powerCurve.pdf")
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression(paste("Type II error vs ", phi))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=40), axis.title.x = element_text(size = 30), axis.title.y = element_text(size = 30), axis.text.x=element_text(size=20), axis.text.y=element_text(size=20))
dev.off()
kinshipEnd <- .034
kinshipSeq <- .001
kinshipCoefs <- seq(kinshipStart,kinshipEnd,kinshipSeq)
powerSimulationResult <- lapply(kinshipCoefs, function(cok){ readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_",cok,"_results.rds"))})
saveRDS(powerSimulationResult, paste0("./plots/s_distributions/",outputDir,"/plotdata/SimulationResults.rds"))
powerSimulationResult <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/SimulationResults.rds"))
combinedSimTable <- do.call(rbind, lapply(powerSimulationResult, '[[',1))
expectedSvector <- unlist(lapply(powerSimulationResult, '[[',2))
nSamples <- unlist(lapply(powerSimulationResult, '[[',3))[1]
varSvector <- unlist(lapply(powerSimulationResult, '[[',4))
fwalpha <- .05
bonferroniAlpha <- fwalpha/choose(nSamples,2)
cutoff <- qnorm(1-bonferroniAlpha, mean=1,sd=sqrt(varSvector))
simPower <- fwalpha + (1-fwalpha)*pnorm(expectedSvector-cutoff, sd=sqrt(varSvector))
powerCurve <- combinedSimTable[, mean(crypticSig=="NO"), by=cok ]
powerCurve$typeIIError <- 1-simPower
pdf("./plots/powerCurve.pdf")
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression(paste("Type II error vs ", phi))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=40), axis.title.x = element_text(size = 30), axis.title.y = element_text(size = 30), axis.text.x=element_text(size=20), axis.text.y=element_text(size=20))
dev.off()
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression(paste("Type II error vs ", phi))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=40), axis.title.x = element_text(size = 30), axis.title.y = element_text(size = 30), axis.text.x=element_text(size=20), axis.text.y=element_text(size=20))
plot(powerCurve$V1-powerCurve$typeIIError)
plot(powerCurve$cok,powerCurve$typeIIError-powerCurve$V1)
Sys.sleep(3)
Sys.sleep(9)
system.time(Sys.sleep(9))
a<-rnorm(1000*1000)
object.size(a)
object.size(a)/1000
a<-rnorm(10000*10000)
object.size(a)/1000
system.time(results <- homogeneousSimulations(numSimulatedSamples=200, nVariants=100000, cok=NA, numSimulations=10, minVariants=5, outputDir=outputDir))
source('~/1000GP/read1000GPsupportFiles.R')
source('~/1000GP/s_matrix_functions.R')
kinshipCoefs
outputDir
outputDir <-"."
system.time(results <- homogeneousSimulations(numSimulatedSamples=200, nVariants=100000, cok=NA, numSimulations=10, minVariants=5, outputDir=outputDir))
names(results)
simResults<-results
pValues <- sapply(simResults, function(res){
#     s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
s_vector <- res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)]
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_hap))
crypticPValue
})
pValues <- apply(pValues, 2, sort)
pValues
dim(pValues)
dim(simResults$Simulated1$s_matrix_hap)
pValues <- apply(pValues, 2, sort)
rowMedians <- apply(pValues,1,mean)
rowMedians
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), hjust=1.1, label = "Related Pair, Phi=.0625")
library(ggplot2)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") +
annotate("text", x = -log(1/nrow(pValues)), y = -log(rowMedians[1]), hjust=1.1, label = "Related Pair, Phi=.0625")
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") #+
pValues <- sapply(simResults, function(res){
#     s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
s_vector <- res$s_matrix_hap[row(res$s_matrix_dip)>col(res$s_matrix_dip)]
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_hap))
crypticPValue
})
pValues <- apply(pValues, 2, sort)
rowMedians <- apply(pValues,1,mean)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") #+
pValues <- sapply(simResults, function(res){
#     s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
s_vector <- res$s_matrix_hap[row(res$s_matrix_dip)>col(res$s_matrix_dip)]
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_dip))
crypticPValue
})
pValues <- apply(pValues, 2, sort)
rowMedians <- apply(pValues,1,mean)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") #+
nrow(pValues)
dim(pValues)
choose(200,2)
dim(simResults$Simulated1$s_matrix_dip)
pValues <- sapply(simResults, function(res){
#     s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
s_vector <- res$s_matrix_hap[row(res$s_matrix_dip)>col(res$s_matrix_dip)]
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_dip))
crypticPValue
})
dim(pValues)
res <- simResults$Simulated1
s_vector <- res$s_matrix_hap[row(res$s_matrix_dip)>col(res$s_matrix_dip)]
length(s_vector)
pValues <- sapply(simResults, function(res){
#     s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
s_vector <- res$s_matrix_dip[row(res$s_matrix_dip)>col(res$s_matrix_dip)]
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_dip))
crypticPValue
})
related <-pValues[199,]
pValues <- sapply(simResults, function(res){
#     s_vector <- sort(res$s_matrix_hap[row(res$s_matrix_hap)>col(res$s_matrix_hap)], decreasing=T)
s_vector <- res$s_matrix_dip[row(res$s_matrix_dip)>col(res$s_matrix_dip)]
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res$var_s_dip))
crypticPValue
})
# unrelated
pValues <- apply(pValues, 2, sort)
rowMedians <- apply(pValues,1,mean)
qplot(-log((1:nrow(pValues))/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") #+
qplot((1:nrow(pValues)/nrow(pValues)),rowMedians) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") #+
pValues <- sapply(simResults, function(res){
s_vector <- res[[s_matrix]][row(res[[s_matrix]])>col(res[[s_matrix]])]
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res[[var_s]]))
crypticPValue
})
diploid=F
s_matrix <- ifelse(diploid, "s_matrix_dip", "s_matrix_hap")
var_s <-    ifelse(diploid, "var_s_dip", "var_s_hap")
pValues <- sapply(simResults, function(res){
s_vector <- res[[s_matrix]][row(res[[s_matrix]])>col(res[[s_matrix]])]
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res[[var_s]]))
crypticPValue
})
di(pValues)
dim(pValues)
is.na(related)
related
relatedPair=NA
is.na(relatedPair)
getPValuesFromSimResults <- function(simResults, diploid=F, relatedPair=NA){
s_matrix <- ifelse(diploid, "s_matrix_dip", "s_matrix_hap")
var_s <-    ifelse(diploid, "var_s_dip", "var_s_hap")
pValues <- sapply(simResults, function(res){
s_vector <- res[[s_matrix]][row(res[[s_matrix]])>col(res[[s_matrix]])]
crypticPValue <- 1-pnorm((s_vector-1)/sqrt(res[[var_s]]))
crypticPValue
})
if (is.na(relatedPair)){
apply(pValues, 2, sort)
} else {
related <-pValues[relatedPair,]
pValues <- rbind(related, apply(pValues[-relatedPair,], 2, sort))
}
}
pValues <- getPValuesFromSimResults(simResults, F)
rowMedians <- apply(pValues,1,median)
qplot((1:nrow(pValues)/nrow(pValues)),rowMedians) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") #+
qplot(-log(1:nrow(pValues)/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") #+
pValues <- getPValuesFromSimResults(simResults, diploid=T)
rowMedians <- apply(pValues,1,median)
qplot(-log(1:nrow(pValues)/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") #+
dim(simResults)
length(simResults)
system.time(results <- homogeneousSimulations(numSimulatedSamples=400, nVariants=100000, cok=NA, numSimulations=10, minVariants=5, outputDir=outputDir))
simResults <- results
rm(results)
pValues <- getPValuesFromSimResults(simResults, diploid=T)
rowMedians <- apply(pValues,1,median)
qplot(-log(1:nrow(pValues)/nrow(pValues)),-log(rowMedians)) + geom_abline(intercept=0,slope=1) +
ggtitle("QQ plot for simulated homogeneous population, 200 haplotypes, 19900 pairs") + xlab("Expected -log(p)") + ylab("Observed -log(p)") #+
outputDir <- 'powerSims400Combined'
list.files(paste0("./plots/s_distributions/",outputDir,"/plotdata/"))
list.files('.')
list.files('./plots')
list.files('./plots/s_distributions/')
list.files('./plots/s_distributions/powerSims400combined/')
list.files('./plots/s_distributions/powerSims400combined/plotdata/')
outputDir
list.files(paste0("./plots/s_distributions/",outputDir))
list.files(paste0("./plots/s_distributions/"))
list.files('./plots/s_distributions/powerSims400combined/plotdata/')
'./plots/s_distributions/powerSims400combined/plotdata/'
paste0("./plots/s_distributions/",outputDir)
outputDir <- 'powerSims400combined'
list.files(paste0("./plots/s_distributions/",outputDir,"/plotdata/"))
?list.files
list.files(paste0("./plots/s_distributions/",outputDir,"/plotdata/"),"Simulated")
powerSimulationResult <- lapply(list.files(paste0("./plots/s_distributions/",outputDir,"/plotdata/"),"Simulated",T),readRDS)
list.files(paste0("./plots/s_distributions/",outputDir,"/plotdata/"),"Simulated",T)
list.files(paste0("./plots/s_distributions/",outputDir,"/plotdata/"),"Simulated",full.names=T)
powerSimulationResult <- lapply(list.files(paste0("./plots/s_distributions/",outputDir,"/plotdata/"),"Simulated",full.names=T),readRDS)
combinedSimTable <- do.call(rbind, lapply(powerSimulationResult, '[[',1))
expectedSvector <- unlist(lapply(powerSimulationResult, '[[',2))
nSamples <- unlist(lapply(powerSimulationResult, '[[',3))[1]
varSvector <- unlist(lapply(powerSimulationResult, '[[',4))
fwalpha <- .05
bonferroniAlpha <- fwalpha/choose(nSamples,2)
cutoff <- qnorm(1-bonferroniAlpha, mean=1,sd=sqrt(varSvector))
simPower <- fwalpha + (1-fwalpha)*pnorm(expectedSvector-cutoff, sd=sqrt(varSvector))
powerCurve <- combinedSimTable[, mean(crypticSig=="NO"), by=cok ]
combinedSimTable
head(combinedSimTable)
powerCurve <- combinedSimTable[, mean(crypticSig=="NO"), by=cok ]
library(data.table)
powerCurve <- combinedSimTable[, mean(crypticSig=="NO"), by=cok ]
powerCurve$typeIIError <- 1-simPower
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression(paste("Type II error vs ", phi))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=40), axis.title.x = element_text(size = 30), axis.title.y = element_text(size = 30), axis.text.x=element_text(size=20), axis.text.y=element_text(size=20))
library(ggplot2)
ggplot(powerCurve) +
geom_point(aes(x=cok,y=V1), size=4, col="red") +
geom_line(aes(x=cok,y=typeIIError), col="blue") +
ggtitle(expression(paste("Type II error vs ", phi))) + xlab(expression(phi)) + ylab("Type II Error") +
theme_bw() +
theme(plot.title = element_text(size=40), axis.title.x = element_text(size = 30), axis.title.y = element_text(size = 30), axis.text.x=element_text(size=20), axis.text.y=element_text(size=20))
dim(combinedSimTable)
head(combinedSimTable)
combinedSimTable[1:100]
combinedSimTable[1:101]
combinedSimTable
dim(combinedSimTable)
