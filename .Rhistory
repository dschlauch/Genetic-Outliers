#     filterhap[hap.sampleIDs=="HG03873"] <- T
#     filterdip[sampleIDs=="HG03873"] <- T
hapsampleNames <- hap.sampleIDs[filterhap]
dipsampleNames <- sampleIDs[filterdip]
genotypes <- genotypes[,filterhap, with=F]
})
names(genotypesList) <- unique(pop)
pop_i
generateSResultsFromGenotypes(pop_i, genotypes, qcFilter, ldPrune)
subpop
subpop <- "CEU"
numSamples <- ncol(genotypes)
numSamples
numVariants <- nrow(genotypes)
sumVariants <- rowSums(genotypes)
generateSResultsFromGenotypes(pop_i, genotypesList[[pop_i]], qcFilter, ldPrune)
dim(genotypesList[[pop_i]])
genotypes <-genotypesList[[pop_i]]
numSamples <- ncol(genotypes)
numSamples
numVariants <- nrow(genotypes)
numVariants
sumVariants <- rowSums(genotypes)
genotypes[sumVariants>(numSamples/2),] <- 1-genotypes[sumVariants>(numSamples/2),]
dim(genotypes[sumVariants>(numSamples/2),])
dim(1-genotypes[sumVariants>(numSamples/2),])
1-genotypes[sumVariants>(numSamples/2),]
genotypes[sumVariants>(numSamples/2),] <- 1-genotypes[sumVariants>(numSamples/2),]
make.unique(colnames(genotypes))
make,unique(names(genotypes))
make.unique(names(genotypes))
names(genotypes) <- make.unique(names(genotypes))
numSamples <- ncol(genotypes)
numVariants <- nrow(genotypes)
sumVariants <- rowSums(genotypes)
# reverse so that MAF<.5
genotypes[sumVariants>(numSamples/2),] <- 1-genotypes[sumVariants>(numSamples/2),]
warnings()
sumVariants <- rowSums(genotypes)
# Intelligently LD prune
numblocks <- numVariants/ldPrune +1
blocks <- rep(1:numblocks, each=ldPrune)[1:numVariants]
system.time(prunedIndices <- sapply(unique(blocks), function(x) {ldPrune*(x-1)+which.max(sumVariants[blocks==x])}))
system.time(genotypes <- genotypes[prunedIndices])
# system.time(genotypes <- genotypes[sapply(unique(blocks), function(x) {ldPrune*(x-1)+which.max(sumVariants[blocks==x])})])
#     genotypes[,blocks:=NULL]
# remove < n variants
sumVariants <- rowSums(genotypes)
genotypes <- genotypes[sumVariants>minVariants,]
genotypes <- as.matrix(genotypes)
# Fully simulated ---------------------------------------------------------
print("Number of used variants")
print(nrow(genotypes))
numFilteredVariants <- nrow(genotypes)
sumFilteredVariants <- rowSums(genotypes)
varcovMat <- cov(genotypes[,c(T,F)] + genotypes[,c(F,T)])
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s_hap <- sum((1-p)/p)/(numFilteredVariants^2)
print("variance of s (haploid)")
print(var_s_hap)
# Calculate expected values conditional on kinship
pkweightsMean <- mean(((sumFilteredVariants-2)/numSamples)*weights)
kinships <- seq(0,.25,.001)
kinshipExpectation <- 1+kinships*(pkweightsMean-1)
s_matrix_numerator <- t(genotypes*weights)%*%genotypes
s_matrix_denominator <- numFilteredVariants
s_matrix_hap <- s_matrix_numerator/s_matrix_denominator
colnames(s_matrix_hap) <- names(genotypes)
rownames(s_matrix_hap) <- names(genotypes)
print(mean(s_matrix_hap[row(s_matrix_hap)!=col(s_matrix_hap)]))
print(median(s_matrix_hap[row(s_matrix_hap)!=col(s_matrix_hap)]))
estimatedKinship <- (s_matrix_hap-1)/(pkweightsMean-1)
# Collapse to diploid
s_matrix_dip <- (s_matrix_hap[c(T,F),c(T,F)] + s_matrix_hap[c(F,T),c(T,F)] +s_matrix_hap[c(T,F),c(F,T)] + s_matrix_hap[c(F,T),c(F,T)])/4
colnames(s_matrix_dip) <- names(genotypes)[c(T,F)]
rownames(s_matrix_dip) <- names(genotypes)[c(T,F)]
# very lazy variance estimate...
var_s_dip <- var_s_hap/4
popResult <- list(s_matrix_dip=s_matrix_dip, s_matrix_hap=s_matrix_hap, pkweightsMean=pkweightsMean, var_s_dip=var_s_dip, var_s_hap=var_s_hap, varcovMat=varcovMat)
popResult
source('~/1000GP/s_matrix_functions.R')
print("Starting read file")
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
print("Finished read file")
names(genotypes) <- hap.sampleIDs
genotypesList <- lapply(unique(pop), function(subpop){
print(subpop)
if(is.null(qcFilter)){
filterhap <- hap.pop%in%subpop
filterdip <- pop%in%subpop
} else {
filterhap <- hap.pop%in%subpop & rep(qcFilter,each=2)
filterdip <- pop%in%subpop & qcFilter
}
#     filterhap[hap.sampleIDs=="HG03998"] <- T
#     filterdip[sampleIDs=="HG03998"] <- T
#     filterhap[hap.sampleIDs=="HG03873"] <- T
#     filterdip[sampleIDs=="HG03873"] <- T
hapsampleNames <- hap.sampleIDs[filterhap]
dipsampleNames <- sampleIDs[filterdip]
genotypes <- genotypes[,filterhap, with=F]
})
names(genotypesList) <- unique(pop)
generateSResultsFromGenotypes(pop_i, genotypesList[[pop_i]], qcFilter, ldPrune)
numCores
numCores<-2
res <- foreach(pop_i=unique(pop),.packages=c("ggplot2","data.table","reshape2")) %dopar% {
generateSResultsFromGenotypes(pop_i, genotypesList[[pop_i]], qcFilter, ldPrune)
}
library(foreach)
library(doParallel)
if(!is.na(numCores)){
cl <- makeCluster(numCores)
registerDoParallel(cl)
}
res <- foreach(pop_i=unique(pop),.packages=c("ggplot2","data.table","reshape2")) %dopar% {
generateSResultsFromGenotypes(pop_i, genotypesList[[pop_i]], qcFilter, ldPrune)
}
if(!is.na(numCores)){
stopCluster(cl)
}
system.time(res <- foreach(pop_i=unique(pop),.packages=c("ggplot2","data.table","reshape2")) %dopar% {
generateSResultsFromGenotypes(pop_i, genotypesList[[pop_i]], qcFilter, ldPrune)
})
if(!is.na(numCores)){
cl <- makeCluster(numCores)
registerDoParallel(cl)
}
system.time(res <- foreach(pop_i=unique(pop),.packages=c("ggplot2","data.table","reshape2")) %dopar% {
generateSResultsFromGenotypes(pop_i, genotypesList[[pop_i]], qcFilter, ldPrune)
})
numberOfLines
dim(genotypes)
library(ggplot2)
library(reshape2)
library(data.table)
genotypeFile <- "./data/combinedFiltered1000.gz"
genotypeFile <- "./data/combinedFiltered100.gz"
numberOfLines <- -1
minVariants <- 10
numCores <- 4
numCores <- 2
outputDir <- '.'
gazalFilter <-"TGP2261"
ldPrune <- 10
if(length(args)!=0){
genotypeFile <- args[1]
numberOfLines <- as.numeric(args[2])
minVariants <- as.numeric(args[3])
numCores <- as.numeric(args[4])
outputDir <- args[5]
gazalFilter <- args[6]
ldPrune <- as.numeric(args[7])
dir.create(paste0("~/1000GP/plots/s_distributions/",outputDir))
dir.create(paste0("~/1000GP/plots/s_distributions/",outputDir,"/plotdata"))
}
length(args)!=0
args
length(args)
if(gazalFilter=="NA"|is.na(gazalFilter)){
qcFilter <- NULL
} else {
gazal_filtered <- read.csv("./data/gazal_filtered.csv",stringsAsFactors=F)
gazal_filtered <- gazal_filtered[order(gazal_filtered[,1]),]
qcFilter <- gazal_filtered[,gazalFilter]=="YES"
}
qcFilter
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
popGroup <- melt(table(pop,group))
popGroup <- popGroup[popGroup$value>0,]
rownames(popGroup) <- popGroup$pop
source('~/1000GP/s_matrix_functions.R')
print("Starting read file")
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
print("Finished read file")
filename="./data/combinedFiltered100.gz"
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
filename="./data/combinedFiltered1000.gz"
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
library(ggplot2)
library(reshape2)
library(data.table)
genotypeFile <- "./data/combinedFiltered1000.gz"
numberOfLines <- 5000
minVariants <- 10
numCores <- 4
outputDir <- '.'
gazalFilter <- "NA"
ldPrune <- 10
if(length(args)!=0){
genotypeFile <- args[1]
numberOfLines <- as.numeric(args[2])
minVariants <- as.numeric(args[3])
numCores <- as.numeric(args[4])
outputDir <- args[5]
gazalFilter <- args[6]
ldPrune <- as.numeric(args[7])
dir.create(paste0("~/1000GP/plots/s_distributions/",outputDir))
dir.create(paste0("~/1000GP/plots/s_distributions/",outputDir,"/plotdata"))
}
if(gazalFilter=="NA"|is.na(gazalFilter)){
qcFilter <- NULL
} else {
gazal_filtered <- read.csv("./data/gazal_filtered.csv",stringsAsFactors=F)
gazal_filtered <- gazal_filtered[order(gazal_filtered[,1]),]
qcFilter <- gazal_filtered[,gazalFilter]=="YES"
}
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
popGroup <- melt(table(pop,group))
popGroup <- popGroup[popGroup$value>0,]
rownames(popGroup) <- popGroup$pop
source('~/1000GP/s_matrix_functions.R')
filename="./data/combinedFiltered1000.gz"
numberOfLines=-1
minVariants=5
print("Starting read file")
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
print("Finished read file")
names(genotypes) <- hap.sampleIDs
genotypesList <- lapply(unique(pop), function(subpop){
print(subpop)
if(is.null(qcFilter)){
filterhap <- hap.pop%in%subpop
filterdip <- pop%in%subpop
} else {
filterhap <- hap.pop%in%subpop & rep(qcFilter,each=2)
filterdip <- pop%in%subpop & qcFilter
}
#     filterhap[hap.sampleIDs=="HG03998"] <- T
#     filterdip[sampleIDs=="HG03998"] <- T
#     filterhap[hap.sampleIDs=="HG03873"] <- T
#     filterdip[sampleIDs=="HG03873"] <- T
hapsampleNames <- hap.sampleIDs[filterhap]
dipsampleNames <- sampleIDs[filterdip]
genotypes <- genotypes[,filterhap, with=F]
})
names(genotypesList) <- unique(pop)
library(foreach)
library(doParallel)
numCores
if(!is.na(numCores)){
cl <- makeCluster(numCores)
registerDoParallel(cl)
}
res <- foreach(pop_i=unique(pop),.packages=c("ggplot2","data.table","reshape2")) %dopar% {
source('~/1000GP/s_matrix_functions.R')
generateSResultsFromGenotypes(pop_i, genotypesList[[pop_i]], qcFilter, ldPrune)
}
length(res)
dim(res$CEU)
dim(res[['CEU']])
names(res)
dim(res[[1]])
res
if(!is.na(numCores)){
stopCluster(cl)
}
length(genotypesList)
if(!is.na(numCores)){
cl <- makeCluster(numCores)
registerDoParallel(cl)
}
print(paste("Running on",numCores,"cores..."))
res <- foreach(genoSubset=genotypesList,.packages=c("ggplot2","data.table","reshape2")) %dopar% {
source('~/1000GP/s_matrix_functions.R')
generateSResultsFromGenotypes(pop_i, genoSubset, qcFilter, ldPrune)
}
names(genotypesList)
res <- foreach(genoSubset=genotypesList,pop_i=names(genotypesList),.packages=c("ggplot2","data.table","reshape2")) %dopar% {
source('~/1000GP/s_matrix_functions.R')
generateSResultsFromGenotypes(pop_i, genoSubset, qcFilter, ldPrune)
}
length(res)
res[[1]]
length(res[[1]])
names(res[[1]])
library(ggplot2)
library(reshape2)
library(data.table)
#outputDir <- "filtered1000_fixed_phi"
#genotypeFile <- "./data/1000GP_Phase3_chr10.hap.gz"
genotypeFile <- "./data/combinedFiltered1000.gz"
numberOfLines <- 5000
minVariants <- 10
numCores <- 4
args<-commandArgs(TRUE)
outputDir <- '.'
# gazalFilter <-"TGP2261"
gazalFilter <- "NA"
ldPrune <- 10
if(length(args)!=0){
genotypeFile <- args[1]
numberOfLines <- as.numeric(args[2])
minVariants <- as.numeric(args[3])
numCores <- as.numeric(args[4])
outputDir <- args[5]
gazalFilter <- args[6]
ldPrune <- as.numeric(args[7])
dir.create(paste0("~/1000GP/plots/s_distributions/",outputDir))
dir.create(paste0("~/1000GP/plots/s_distributions/",outputDir,"/plotdata"))
}
# incorporating gazal filtering -------------------------------------------
if(gazalFilter=="NA"|is.na(gazalFilter)){
qcFilter <- NULL
} else {
gazal_filtered <- read.csv("./data/gazal_filtered.csv",stringsAsFactors=F)
gazal_filtered <- gazal_filtered[order(gazal_filtered[,1]),]
qcFilter <- gazal_filtered[,gazalFilter]=="YES"
}
# Real data
sample <- read.table("~/1000GP/data/1000GP_Phase3.sample", sep=" ", header=T)
sampleIDs <- as.character(sample[,1])
pop <- as.character(sample[,2])
group <- as.character(sample[,3])
sex <- as.character(sample[,4])
hap.pop <- rep(pop,each=2)
hap.sampleIDs <- rep(as.character(sample[,1]),each=2)
popGroup <- melt(table(pop,group))
popGroup <- popGroup[popGroup$value>0,]
rownames(popGroup) <- popGroup$pop
source('~/1000GP/s_matrix_functions.R')
genotypeFile
filename=genotypeFile
numberOfLines <- -1
print("Starting read file")
system.time(genotypes <- fread(paste('zcat',filename), sep=" ", nrows=numberOfLines, header=F))
print("Finished read file")
names(genotypes) <- hap.sampleIDs
genotypesList <- lapply(unique(pop), function(subpop){
print(subpop)
if(is.null(qcFilter)){
filterhap <- hap.pop%in%subpop
filterdip <- pop%in%subpop
} else {
filterhap <- hap.pop%in%subpop & rep(qcFilter,each=2)
filterdip <- pop%in%subpop & qcFilter
}
#     filterhap[hap.sampleIDs=="HG03998"] <- T
#     filterdip[sampleIDs=="HG03998"] <- T
#     filterhap[hap.sampleIDs=="HG03873"] <- T
#     filterdip[sampleIDs=="HG03873"] <- T
hapsampleNames <- hap.sampleIDs[filterhap]
dipsampleNames <- sampleIDs[filterdip]
genotypes <- genotypes[,filterhap, with=F]
})
names(genotypesList) <- unique(pop)
system.time(generateSResultsFromGenotypes(names(genotypesList)[1], genotypesList[[1]], qcFilter, ldPrune))
dim(genotypes)
source('~/1000GP/s_matrix_functions.R')
object.size(genotypesList[[1]])
object.size(genotypesList[[1]])/1000
object.size(genotypesList[[1]])/1000000
object.size(genotypes)/1000000
1637/26
?xapply
?running
library(gtools)
?running
runningWhichMax <- running(sumVariants,width=10,fun=which.max)
genotypesSubpop
genotypesSubpop <- genotypesList[[1]]
names(genotypesSubpop) <- make.unique(names(genotypesSubpop))
numSamples <- ncol(genotypesSubpop)
numVariants <- nrow(genotypesSubpop)
sumVariants <- rowSums(genotypesSubpop)
# reverse so that MAF<.5
genotypesSubpop[sumVariants>(numSamples/2),] <- 1-genotypesSubpop[sumVariants>(numSamples/2),]
sumVariants <- rowSums(genotypesSubpop)
# Intelligently LD prune
numblocks <- numVariants/ldPrune +1
blocks <- rep(1:numblocks, each=ldPrune)[1:numVariants]
runningWhichMax <- running(sumVariants,width=10,fun=which.max)
system.time(runningWhichMax <- running(sumVariants,width=10,fun=which.max))
length(runningWhichMax)
runningWhichMax[1:10]
length(sumVariants)
system.time(prunedIndices <- sapply(unique(blocks), function(x) {ldPrune*(x-1)+which.max(sumVariants[x*ldPrune:(x*ldPrune+ldPrune-1)])}))
system.time(prunedIndices <- sapply(unique(blocks), function(x) {ldPrune*(x-1)+which.max(sumVariants[blocks==x])}))
system.time(prunedIndices <- sapply(unique(blocks), function(x) {ldPrune*(x-1)+which.max(sumVariants[x*ldPrune:(x*ldPrune+ldPrune-1)])}))
ldPrune
system.time(runningWhichMax <- running(sumVariants,width=ldPrune,fun=which.max, by=ldPrune))
length(runningWhichMax)
runningWhichMax[1:15]
runningWhichMax[1:55]
qq <- seq(0,ldPrune*(length(runningWhichMax)-1),ldPrune)
length(qq)
qq[1:5]
prunedIndices <- runningWhichMax + seq(0,ldPrune*(length(runningWhichMax)-1),ldPrune)
prunedIndices
system.time(genotypesSubpop <- genotypesSubpop[prunedIndices])
generateSResultsFromGenotypes <- function(subpop, genotypesSubpop, qcFilter, ldPrune=1){
names(genotypesSubpop) <- make.unique(names(genotypesSubpop))
numSamples <- ncol(genotypesSubpop)
numVariants <- nrow(genotypesSubpop)
sumVariants <- rowSums(genotypesSubpop)
# reverse so that MAF<.5
genotypesSubpop[sumVariants>(numSamples/2),] <- 1-genotypesSubpop[sumVariants>(numSamples/2),]
sumVariants <- rowSums(genotypesSubpop)
# Intelligently LD prune
numblocks <- numVariants/ldPrune +1
blocks <- rep(1:numblocks, each=ldPrune)[1:numVariants]
system.time(runningWhichMax <- running(sumVariants,width=ldPrune,fun=which.max, by=ldPrune))
prunedIndices <- runningWhichMax + seq(0,ldPrune*(length(runningWhichMax)-1),ldPrune)
#     system.time(prunedIndices <- sapply(unique(blocks), function(x) {ldPrune*(x-1)+which.max(sumVariants[x*ldPrune:(x*ldPrune+ldPrune-1)])}))
system.time(genotypesSubpop <- genotypesSubpop[prunedIndices])
# system.time(genotypesSubpop <- genotypesSubpop[sapply(unique(blocks), function(x) {ldPrune*(x-1)+which.max(sumVariants[blocks==x])})])
#     genotypesSubpop[,blocks:=NULL]
# remove < n variants
sumVariants <- rowSums(genotypesSubpop)
genotypesSubpop <- genotypesSubpop[sumVariants>minVariants,]
genotypesSubpop <- as.matrix(genotypesSubpop)
# Fully simulated ---------------------------------------------------------
#     numSamples <- 100
#     numVariants<- 100000
#     genotypesSubpop <- matrix(rbinom(numSamples*2*numVariants,1, .1), ncol=numSamples*2)
#     numSamples <- ncol(genotypesSubpop)
#     sumVariants <- rowSums(genotypesSubpop)
#     genotypesSubpop <- genotypesSubpop[sumVariants>5,]
#     subpop <- "Simulated"
#     sum(rowSums(genotypesSubpop)<2)
# #     ################### Toggle this.  Adds a related individual for testing ################
#     coefR <- .1
#     probs <- rep((1-2*coefR)/ncol(genotypesSubpop),ncol(genotypesSubpop))
#     probs[1:2] <- probs[1:2]+coefR
#     indices <- replicate(nrow(genotypesSubpop), {sample(ncol(genotypesSubpop),2 , prob=probs, replace=F)})
# #     indices1 <- sample(ncol(genotypesSubpop), nrow(genotypesSubpop), prob=probs, replace=T)
# #     indices2 <- sample(ncol(genotypesSubpop), nrow(genotypesSubpop), prob=probs, replace=T)
#     relatedHap1 <- mapply(function(x,y){genotypesSubpop[x,y]},1:nrow(genotypesSubpop),indices[1,])
#     relatedHap2 <- mapply(function(x,y){genotypesSubpop[x,y]},1:nrow(genotypesSubpop),indices[2,])
#     genotypesSubpop <- cbind(genotypesSubpop, relatedHap1, relatedHap2)
#     ################################################
print("Number of used variants")
print(nrow(genotypesSubpop))
numFilteredVariants <- nrow(genotypesSubpop)
sumFilteredVariants <- rowSums(genotypesSubpop)
varcovMat <- cov(genotypesSubpop[,c(T,F)] + genotypesSubpop[,c(F,T)])
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s_hap <- sum((1-p)/p)/(numFilteredVariants^2)
print("variance of s (haploid)")
print(var_s_hap)
# Calculate expected values conditional on kinship
pkweightsMean <- mean(((sumFilteredVariants-2)/numSamples)*weights)
kinships <- seq(0,.25,.001)
kinshipExpectation <- 1+kinships*(pkweightsMean-1)
s_matrix_numerator <- t(genotypesSubpop*weights)%*%genotypesSubpop
s_matrix_denominator <- numFilteredVariants
s_matrix_hap <- s_matrix_numerator/s_matrix_denominator
colnames(s_matrix_hap) <- names(genotypesSubpop)
rownames(s_matrix_hap) <- names(genotypesSubpop)
print(mean(s_matrix_hap[row(s_matrix_hap)!=col(s_matrix_hap)]))
print(median(s_matrix_hap[row(s_matrix_hap)!=col(s_matrix_hap)]))
estimatedKinship <- (s_matrix_hap-1)/(pkweightsMean-1)
# Collapse to diploid
s_matrix_dip <- (s_matrix_hap[c(T,F),c(T,F)] + s_matrix_hap[c(F,T),c(T,F)] +s_matrix_hap[c(T,F),c(F,T)] + s_matrix_hap[c(F,T),c(F,T)])/4
colnames(s_matrix_dip) <- names(genotypesSubpop)[c(T,F)]
rownames(s_matrix_dip) <- names(genotypesSubpop)[c(T,F)]
# very lazy variance estimate...
var_s_dip <- var_s_hap/4
popResult <- list(s_matrix_dip=s_matrix_dip, s_matrix_hap=s_matrix_hap, pkweightsMean=pkweightsMean, var_s_dip=var_s_dip, var_s_hap=var_s_hap, varcovMat=varcovMat)
saveRDS(popResult, paste0("./plots/s_distributions/",outputDir,"/plotdata/",subpop,"_data.rds"))
popResult
# For sim -----------------------------------------------------------------
#
#     var_s <- var_s_dip
#     gsm <- s_matrix_dip
#     sample_IDs <- paste0("Sample",1:ncol(gsm))
#     sample_IDs[length(sample_IDs)] <- "Related"
#
#     var_s <- var_s_hap
#     gsm <- s_matrix_hap
#     sample_IDs <- paste0("Sample",1:ncol(gsm))
#     sample_IDs[c(length(sample_IDs),length(sample_IDs)-1)] <- "Related"
#
#     alphaCutoff=.01
}
gazalFilter
source('~/1000GP/s_matrix_functions.R')
genotypeFile
results <- calculateSMatrix(pop_i, filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants, qcFilter=qcFilter, ldPrune)
names(results) <- unique(pop)
outputDir
outputDir
saveRDS(results, paste0("./plots/s_distributions/",outputDir,"/plotdata/all_data.rds"))
length(results)
names(results)
dim(results[[1]])
dim(results[[2]])
dim(results[[3]])
dim(results[[4]])
dim(results[[6]])
dim(results[[13]])
source('~/1000GP/s_matrix_functions.R')
results <- calculateSMatrix(pop_i, filename=genotypeFile, numberOfLines=numberOfLines, minVariants=minVariants, qcFilter=qcFilter, ldPrune)
