dev.off()
saveRDS(powerSimulationResult, paste0("./plots/s_distributions/",outputDir,"/plotdata/SimulationResults.rds"))
library(ggplot2)
library(reshape2)
library(data.table)
library(gtools)
library(grid)
source('~/1000GP/s_matrix_functions.R')
numSamples <- 300
numVariants <- 100000
genotypes <- data.table(matrix(rbinom(numSamples*numVariants,1,.2), ncol=numSamples))
system.time(generateSResultsFromGenotypes("Speed test", genotypes, outputDir=".", saveResult=F,varcov=F))
system.time(princomp(genotypes))
set.seed(4943546)
nr <- 50
nc <- 2000
x  <- matrix( rnorm( nr*nc), nrow=nr, ncol=nc )
tx <- t(x)
# SVD directly on matrix is SLOW:
system.time( val.x <- svd(x)$u )
# SVD on t(matrix) is FAST:
system.time( val.tx <- svd(tx)$v )
# and the results are equivalent:
max( abs(val.x) - abs(val.tx) )
# Time gap dissapears using fast.svd:
system.time( val.x <- fast.svd(x)$u )
system.time( val.tx <- fast.svd(tx)$v )
max( abs(val.x) - abs(val.tx) )
library(stats)
# prcomp directly on matrix is SLOW:
system.time( pr.x <- prcomp(x) )
# prcomp.fast is much faster
system.time( fast.pr.x <- fast.prcomp(x) )
# and the results are equivalent
max( pr.x$sdev - fast.pr.x$sdev )
max( abs(pr.x$rotation[,1:49]) - abs(fast.pr.x$rotation[,1:49]) )
max( abs(pr.x$x) - abs(fast.pr.x$x)  )
# (except for the last and least significant component):
max( abs(pr.x$rotation[,50]) - abs(fast.pr.x$rotation[,50]) )
library(gmodels)
set.seed(4943546)
nr <- 50
nc <- 2000
x  <- matrix( rnorm( nr*nc), nrow=nr, ncol=nc )
tx <- t(x)
# SVD directly on matrix is SLOW:
system.time( val.x <- svd(x)$u )
# SVD on t(matrix) is FAST:
system.time( val.tx <- svd(tx)$v )
# and the results are equivalent:
max( abs(val.x) - abs(val.tx) )
# Time gap dissapears using fast.svd:
system.time( val.x <- fast.svd(x)$u )
system.time( val.tx <- fast.svd(tx)$v )
max( abs(val.x) - abs(val.tx) )
library(stats)
# prcomp directly on matrix is SLOW:
system.time( pr.x <- prcomp(x) )
# prcomp.fast is much faster
system.time( fast.pr.x <- fast.prcomp(x) )
# and the results are equivalent
max( pr.x$sdev - fast.pr.x$sdev )
max( abs(pr.x$rotation[,1:49]) - abs(fast.pr.x$rotation[,1:49]) )
max( abs(pr.x$x) - abs(fast.pr.x$x)  )
# (except for the last and least significant component):
max( abs(pr.x$rotation[,50]) - abs(fast.pr.x$rotation[,50]) )
nr <- 500
nc <- 20000
x  <- matrix( rnorm( nr*nc), nrow=nr, ncol=nc )
tx <- t(x)
system.time( val.x <- svd(x)$u )
system.time( val.tx <- svd(tx)$v )
system.time(eigen(cor(genotypes)))
system.time(generateSResultsFromGenotypes("Speed test", genotypes, outputDir=".", saveResult=F,varcov=F))
system.time(princomp(genotypes))
system.time(eigen(cor(genotypes)))
numSamples <- 1000
numVariants <- 100000
genotypes <- data.table(matrix(rbinom(numSamples*numVariants,1,.2), ncol=numSamples))
system.time(generateSResultsFromGenotypes("Speed test", genotypes, outputDir=".", saveResult=F,varcov=F))
system.time(princomp(genotypes))
system.time(eigen(cor(genotypes)))
?princomp
system.time(svd(cor(genotypes)))
speedTest <- function(genotypesSubpop){
numSamples <- ncol(genotypesSubpop)
numVariants <- nrow(genotypesSubpop)
sumVariants <- rowSums(genotypesSubpop)
# remove < n variants
sumVariants <- rowSums(genotypesSubpop)
genotypesSubpop <- genotypesSubpop[sumVariants>minVariants,]
genotypesSubpop <- as.matrix(genotypesSubpop)
print("Number of used variants")
print(nrow(genotypesSubpop))
numFilteredVariants <- nrow(genotypesSubpop)
sumFilteredVariants <- rowSums(genotypesSubpop)
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s_hap <- sum(weights-1)/(numFilteredVariants^2)
# Calculate expected values conditional on kinship
pkweightsMean <- mean(((sumFilteredVariants-2)/numSamples)*weights)
s_matrix_numerator <- t(genotypesSubpop*weights)%*%genotypesSubpop
s_matrix_denominator <- numFilteredVariants
s_matrix_hap <- s_matrix_numerator/s_matrix_denominator
}
library(data.table)
speedTest <- function(genotypesSubpop){
numSamples <- ncol(genotypesSubpop)
numVariants <- nrow(genotypesSubpop)
sumVariants <- rowSums(genotypesSubpop)
# remove < n variants
sumVariants <- rowSums(genotypesSubpop)
genotypesSubpop <- genotypesSubpop[sumVariants>minVariants,]
genotypesSubpop <- as.matrix(genotypesSubpop)
print("Number of used variants")
print(nrow(genotypesSubpop))
numFilteredVariants <- nrow(genotypesSubpop)
sumFilteredVariants <- rowSums(genotypesSubpop)
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s_hap <- sum(weights-1)/(numFilteredVariants^2)
# Calculate expected values conditional on kinship
pkweightsMean <- mean(((sumFilteredVariants-2)/numSamples)*weights)
s_matrix_numerator <- t(genotypesSubpop*weights)%*%genotypesSubpop
s_matrix_denominator <- numFilteredVariants
s_matrix_hap <- s_matrix_numerator/s_matrix_denominator
}
numSamples <- 1000
numVariants <- 100000
genotypes <- data.table(matrix(rbinom(numSamples*numVariants,1,.2), ncol=numSamples))
numSamples <- 100
numVariants <- 100000
genotypes <- data.table(matrix(rbinom(numSamples*numVariants,1,.2), ncol=numSamples))
print(system.time(speedTest(genotypes)))
speedTest <- function(genotypesSubpop){
numSamples <- ncol(genotypesSubpop)
numVariants <- nrow(genotypesSubpop)
sumVariants <- rowSums(genotypesSubpop)
# remove < n variants
sumVariants <- rowSums(genotypesSubpop)
genotypesSubpop <- as.matrix(genotypesSubpop)
print("Number of used variants")
print(nrow(genotypesSubpop))
numFilteredVariants <- nrow(genotypesSubpop)
sumFilteredVariants <- rowSums(genotypesSubpop)
totalPossiblePairs <- choose(numSamples,2)
totalPairs <- choose(sumFilteredVariants,2)
weights <- totalPossiblePairs/totalPairs
p <- 1/weights
var_s_hap <- sum(weights-1)/(numFilteredVariants^2)
# Calculate expected values conditional on kinship
pkweightsMean <- mean(((sumFilteredVariants-2)/numSamples)*weights)
s_matrix_numerator <- t(genotypesSubpop*weights)%*%genotypesSubpop
s_matrix_denominator <- numFilteredVariants
s_matrix_hap <- s_matrix_numerator/s_matrix_denominator
}
print(system.time(speedTest(genotypes)))
print(system.time(princomp(genotypes)))
print(system.time(eigen(cor(genotypes))))
print(system.time(svd(cor(genotypes))))
numSamples <- 1000
numVariants <- 100000
genotypes <- data.table(matrix(rbinom(numSamples*numVariants,1,.2), ncol=numSamples))
print(system.time(speedTest(genotypes)))
print(system.time(princomp(genotypes)))
print(system.time(eigen(cor(genotypes))))
print(system.time(svd(cor(genotypes))))
matrix(1,nrow=10,ncol=5)
matrix(1,nrow=10,ncol=5)*(1:10)
tcrossprod(matrix(1,nrow=10,ncol=5))
tcrossprod(matrix(1,nrow=10,ncol=5))*(1:10)
a<-matrix(1,nrow=10,ncol=5)
tcrossprod(a)*(1:10)
t(a)*(1:10)*a
t(a*(1:10))*a
t(a*(1:10))
t(a*(1:10))%*%a
sum(1:10)
a<-matrix(c(1,0),nrow=10,ncol=5)
a
a<-matrix(c(1,0),nrow=10,ncol=5)
t(a*(1:10))%*%a
b<-1:10
t(a*b%*%a
t(a*b)%*%a
t(a*b)%*%a
a<-matrix(rbinom(50,1,.5),nrow=10,ncol=5)
a
t(a*b)%*%a
b<-matrix(1:10,ncol=1)
b
t(a*b)%*%a
b%*%t(a)%*%a
t(b%*%a)%*%a
b%*%a
b<-1:10
t(a*b)%*%a
?tcrossprod
tcrossprod(a)
a
tcrossprod(t(a))
tcrossprod(b)
b<-matrix(1:10,ncol=1)
tcrossprod(b)
tcrossprod(b)
tcrossprod(t(a))
t(a*b)%*%a
t(a*(1:10))%*%a
matrix(1,10000,10000)
system.time(m)
m<-matrix(1,10000,10000)
system.time(t(m))
m<-matrix(rnorm(10000000),10000,1000)
system.time(t(m))
system.time(m%*%t(m))
system.time(t(m)%*%m)
system.time(tcrossprod(m))
system.time(tcrossprod(t(m)))
system.time(crossprod(m))
choose(30,2)
choose(15,2)
choose(6,2)
choose(52,2)
varA <- c("USA", "Russia", "China","USA", "Russia", "China","USA", "Russia",
"USA", "Russia", "China","USA", "Russia", "China","USA", "Russia",
"USA", "Russia", "China","USA", "Russia", "China","USA", "Russia",
"USA", "Russia", "China","USA", "Russia", "China","USA", "Russia",
"China","USA", "Russia", "China")
varA <- c("Black", "Poo","Black", "Black", "Black","White", "Black", "White",
"Black", "Poo","Black", "Black", "Black","White", "Black", "White",
"Black", "Poo","Black", "Black", "Black","White", "Black", "White",
"Black", "Poo","Black", "Black", "Black","White", "Black", "White",
"Black", "Poo", "Poo",	"Poo")
varA <- c("USA", "Russia", "China","USA", "Russia", "China","USA", "Russia",
"USA", "Russia", "China","USA", "Russia", "China","USA", "Russia",
"USA", "Russia", "China","USA", "Russia", "China","USA", "Russia",
"USA", "Russia", "China","USA", "Russia", "China","USA", "Russia",
"China","USA", "Russia", "China")
varB <- c("Black", "Poo","Black", "Black", "Black","White", "Black", "White",
"Black", "Poo","Black", "Black", "Black","White", "Black", "White",
"Black", "Poo","Black", "Black", "Black","White", "Black", "White",
"Black", "Poo","Black", "Black", "Black","White", "Black", "White",
"Black", "Poo", "Poo",	"Poo")
table(varA,varB)
chisq.test(varA,varB)
filter <- varA=="USA"
filter
chisq.test(varA[filter],varB[filter])
filter <- varA!="USA"
chisq.test(varA[filter],varB[filter])
varA <- c("USA", "Russia", "China","USA", "Russia", "China","USA", "Russia",
"USA", "Russia", "China","USA", "Russia", "China","USA", "Russia",
"USA", "Russia", "China","USA", "Russia", "China","USA", "Russia",
"USA", "Russia", "China","USA", "Russia", "China","USA", "Russia",
"USA", "USA", "USA","USA", "USA", "USA","USA", "USA",
"China", "China", "China","China", "China", "China","China", "China",
"China","USA", "Russia", "China")
varB <- c("Black", "Red","Black", "Black", "Black","White", "Black", "White",
"Black", "Red","Black", "Black", "Black","White", "Black", "White",
"Black", "Red","Black", "Black", "Black","White", "Black", "White",
"Black", "Red","Black", "Black", "Black","White", "Black", "White",
"White", "White","White", "White", "White","White", "Red", "Red",
"White", "White","Red", "Red", "Red","Red", "Red", "Red",
"Black", "Red", "Red",    "Red")
filter <- varA=="USA"
chisq.test(varA[filter],varB[filter])
filter <- varA!="USA"
table(varA,VarB)
table(varA,varB)
filter <- varA!="USA"
chisq.test(varA[filter],varB[filter])
source('~/.active-rstudio-document')
table(varA,varB)
chisq.test(varA, varB=="White")
chisq.test(varA, varB=="Black")
chisq.test(varA=="China", varB)
chisq.test(varA=="China",)varB=="White")
chisq.test(varA=="China",varB=="White")
chisq.test(varA=="USA",varB=="Red")
table(varA=="USA",varB=="Red")
22*3/(17*18)
chisq.test(varA, varB=="White")
chisq.test(varA=="Russia",varB=="Red")
table(varA=="Russia",varB=="Red")
chisq.test(varA, varB=="Red")
chisq.test(varA=="USA", varB)
?chisq.test
chisq.test(varA=="USA",varB=="Red")
chisq.test(varA=="USA",varB=="Red",correct = F)
?princomp
source('~/1000GP/timingComparison.R')
source('~/1000GP/timingComparison.R')
numSamples
print(system.time(cor(genotypes)))
print(system.time(speedTest(genotypes)))
print(system.time(cor(genotypes)))
numSamples <- 1000
numVariants <- 100000
genotypes <- data.table(matrix(rbinom(numSamples*numVariants,1,.2), ncol=numSamples))
print(system.time(cor(genotypes)))
library(pryr)
vclA = vclMatrix(rnorm(10000), nrow = 100)
library(gpuR)
install.packages("gpuR")
library(gpuR)
library(bereR)
library(pandaR)
library(bptools)
library(reshape2)
library(penalized)
library(Biobase)
library(org.Hs.eg.db)
library(foreach)
library(doParallel)
library(limma)
library(igraph)
library(ggrepel)
load("~/gd/Harvard/Research/TM_outputs/JASPAR2014/BERE/ECLIPSE_combined_runs/activeImage.RData")
outputDir <- "~/gd/Harvard/Research/R_workspace/TM_manuscript/figures/"
analysisCode <- "ECLIPSE"
results <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/all_data.rds"))
sapply(names(results), function(pop_i){
s_vector <- results[[pop_i]]$s_matrix_dip[row(results[[pop_i]]$s_matrix_dip)>col(results[[pop_i]]$s_matrix_dip)]
plotFromGSM(subpop=pop_i, gsm=results[[pop_i]]$s_matrix_dip, var_s=var(s_vector), pkweightsMean=results[[pop_i]]$pkweightsMean, "diploid", outputDir=outputDir)
})
outputDir
outputDir <- '.'
results <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/all_data.rds"))
sapply(names(results), function(pop_i){
s_vector <- results[[pop_i]]$s_matrix_dip[row(results[[pop_i]]$s_matrix_dip)>col(results[[pop_i]]$s_matrix_dip)]
plotFromGSM(subpop=pop_i, gsm=results[[pop_i]]$s_matrix_dip, var_s=var(s_vector), pkweightsMean=results[[pop_i]]$pkweightsMean, "diploid", outputDir=outputDir)
})
simResults <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data.rds"))
getPopResults <- function(results){
as.data.table(t(sapply(names(results), function(pop_i){
s_vector <- sort(results[[pop_i]]$s_matrix_hap[row(results[[pop_i]]$s_matrix_hap)>col(results[[pop_i]]$s_matrix_hap)], decreasing=T)
topKinship <- (s_vector[1]-1)/(results[[pop_i]]$pkweightsMean-1)
btest <- binom.test(sum(s_vector>mean(s_vector)), length(s_vector), alternative="less")
structureKSTest <- ks.test((s_vector-1)/sqrt(results[[pop_i]]$var_s_hap), "pnorm", alternative = c("less"))$p.value
crypticSig <- ifelse((s_vector[1]-1)/sqrt(results[[pop_i]]$var_s_hap) > qnorm(1-.005/length(s_vector)), "YES+",
ifelse((s_vector[1]-1)/sqrt(results[[pop_i]]$var_s_hap) > qnorm(1-.025/length(s_vector)),"YES","NO"))
structureSig <- ifelse(structureKSTest<.01, "YES+",ifelse(structureKSTest<.05,"YES","NO"))
c(structurePValue=btest$p.value, var_s=results[[pop_i]]$var_s_hap, sampleVariance=var(s_vector),
structureKSTest=structureKSTest, closestRelatives=topKinship, crypticSig=crypticSig, structureSig=structureSig)
})), keep.rownames=T)
}
outputDir <- "filtered40_TGP2261_LD10"
s
results <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/all_data.rds"))
popResults <- getPopResults(results)
library(data.table)
popResults <- getPopResults(results)
popResults <- popResults[order(rn)[rank(popGroup$pop)]]
library(ggplot2)
library(reshape2)
library(data.table)
library(gtools)
library(grid)
source('~/1000GP/read1000GPsupportFiles.R')
source('~/1000GP/s_matrix_functions.R')
outputDir <- 'filtered40_LD10'
gazalFilter <- "NA"
source('~/1000GP/read1000GPsupportFiles.R')
source('~/1000GP/s_matrix_functions.R')
results <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/all_data.rds"))
outputDir
popResults <- getPopResults(results)
popResults <- popResults[order(rn)[rank(popGroup$pop)]]
popResults$super <- popGroup$group
popResults[,c("rn","super", "structureSig", "crypticSig"), with=F]
popResults
names(popResults)[1] <- "pop"
popResults$group <- popGroup[popResults$pop,"group"]
popResults <- popResults[order(group,pop)]
popResults$pop <- factor(popResults$pop, levels=popResults$pop)
maxYvalue <- 200
ggPVals <- ggplot(popResults, aes(y=-log(structureKSTest), x=pop)) +
#     geom_hline(yintercept=-log(.05)) + #geom_text(aes(13,-log(.05),label = "alpha = .05", vjust = -1),parse = T) +
geom_hline(yintercept=0) +
geom_hline(yintercept=-log(.01), linetype='dashed', color="red") + #geom_text(aes(20,-log(.01),size=5,label = "alpha == .01", vjust = -1),parse = T) +
annotation_custom(
grob = textGrob(label = expression(alpha==.01), hjust = 0, gp = gpar(col="red",fontsize=10, cex = 1.5)),
ymin = -log(.01),      # Vertical position of the textGrob
ymax = -log(.01),
xmin = 27,         # Note: The grobs are positioned outside the plot area
xmax = 27) +
ggtitle("p-value for structure in each population") + theme_bw() +
ylab("-log(p-value)") + xlab("Population") + ggtitle("Structure Detected in 1000 Genomes Populations") +
guides(color = guide_legend(title = "Super population")) +
ylim(0,maxYvalue) +
geom_point(aes(color=group),size=3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
gt <- ggplot_gtable(ggplot_build(ggPVals))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
ggPVals
ggplot(popResults, aes(y=-log(structureKSTest), x=pop)) +
#     geom_hline(yintercept=-log(.05)) + #geom_text(aes(13,-log(.05),label = "alpha = .05", vjust = -1),parse = T) +
geom_hline(yintercept=0) +
geom_hline(yintercept=-log(.01), linetype='dashed', color="red") + #geom_text(aes(20,-log(.01),size=5,label = "alpha == .01", vjust = -1),parse = T) +
annotation_custom(
grob = textGrob(label = expression(alpha==.01), hjust = 0, gp = gpar(col="red",fontsize=10, cex = 1.5)),
ymin = -log(.01),      # Vertical position of the textGrob
ymax = -log(.01),
xmin = 27,         # Note: The grobs are positioned outside the plot area
xmax = 27) +
ggtitle("p-value for structure in each population") + theme_bw() +
ylab("-log(p-value)") + xlab("Population") + ggtitle("Structure Detected in 1000 Genomes Populations") +
guides(color = guide_legend(title = "Super population")) +
ylim(0,maxYvalue) +
geom_point(aes(color=group),size=3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
structureKSTest
popResults
results
popResults <- getPopResults(results)
popResults
getPopResults <- function(results, var_s="var_s_hap", s_matrix="s_matrix_hap"){
as.data.table(t(sapply(names(results), function(pop_i){
s_vector <- sort(results[[pop_i]]$s_matrix[row(results[[pop_i]]$s_matrix)>col(results[[pop_i]]$s_matrix)], decreasing=T)
topKinship <- (s_vector[1]-1)/(results[[pop_i]]$pkweightsMean-1)
btest <- binom.test(sum(s_vector>mean(s_vector)), length(s_vector), alternative="less")
structureKSTest <- ks.test((s_vector-1)/sqrt(results[[pop_i]]$var_s), "pnorm", alternative = c("less"))$p.value
crypticSig <- ifelse((s_vector[1]-1)/sqrt(results[[pop_i]]$var_s) > qnorm(1-.005/length(s_vector)), "YES+",
ifelse((s_vector[1]-1)/sqrt(results[[pop_i]]$var_s) > qnorm(1-.025/length(s_vector)),"YES","NO"))
structureSig <- ifelse(structureKSTest<.01, "YES+",ifelse(structureKSTest<.05,"YES","NO"))
c(structurePValue=btest$p.value, var_s=results[[pop_i]]$var_s, sampleVariance=var(s_vector),
structureKSTest=structureKSTest, closestRelatives=topKinship, crypticSig=crypticSig, structureSig=structureSig)
})), keep.rownames=T)
}
popResults <- getPopResults(results, "var_s_dip", "s_matrix_dip")
getPopResults <- function(results, var_s="var_s_hap", s_matrix="s_matrix_hap"){
as.data.table(t(sapply(names(results), function(pop_i){
s_vector <- sort(results[[pop_i]][[s_matrix]][row(results[[pop_i]][[s_matrix]])>col(results[[pop_i]][[s_matrix]])], decreasing=T)
topKinship <- (s_vector[1]-1)/(results[[pop_i]]$pkweightsMean-1)
btest <- binom.test(sum(s_vector>mean(s_vector)), length(s_vector), alternative="less")
structureKSTest <- ks.test((s_vector-1)/sqrt(results[[pop_i]]$var_s), "pnorm", alternative = c("less"))$p.value
crypticSig <- ifelse((s_vector[1]-1)/sqrt(results[[pop_i]]$var_s) > qnorm(1-.005/length(s_vector)), "YES+",
ifelse((s_vector[1]-1)/sqrt(results[[pop_i]]$var_s) > qnorm(1-.025/length(s_vector)),"YES","NO"))
structureSig <- ifelse(structureKSTest<.01, "YES+",ifelse(structureKSTest<.05,"YES","NO"))
c(structurePValue=btest$p.value, var_s=results[[pop_i]]$var_s, sampleVariance=var(s_vector),
structureKSTest=structureKSTest, closestRelatives=topKinship, crypticSig=crypticSig, structureSig=structureSig)
})), keep.rownames=T)
}
popResults <- getPopResults(results, "var_s_dip", "s_matrix_dip")
getPopResults <- function(results, var_s="var_s_hap", s_matrix="s_matrix_hap"){
as.data.table(t(sapply(names(results), function(pop_i){
s_vector <- sort(results[[pop_i]][[s_matrix]][row(results[[pop_i]][[s_matrix]])>col(results[[pop_i]][[s_matrix]])], decreasing=T)
topKinship <- (s_vector[1]-1)/(results[[pop_i]]$pkweightsMean-1)
btest <- binom.test(sum(s_vector>mean(s_vector)), length(s_vector), alternative="less")
structureKSTest <- ks.test((s_vector-1)/sqrt(results[[pop_i]][[var_s]]), "pnorm", alternative = c("less"))$p.value
crypticSig <- ifelse((s_vector[1]-1)/sqrt(results[[pop_i]][[var_s]]) > qnorm(1-.005/length(s_vector)), "YES+",
ifelse((s_vector[1]-1)/sqrt(results[[pop_i]][[var_s]]) > qnorm(1-.025/length(s_vector)),"YES","NO"))
structureSig <- ifelse(structureKSTest<.01, "YES+",ifelse(structureKSTest<.05,"YES","NO"))
c(structurePValue=btest$p.value, var_s=results[[pop_i]][[var_s]], sampleVariance=var(s_vector),
structureKSTest=structureKSTest, closestRelatives=topKinship, crypticSig=crypticSig, structureSig=structureSig)
})), keep.rownames=T)
}
popResults <- getPopResults(results, "var_s_dip", "s_matrix_dip")
popResults
popResults <- popResults[order(rn)[rank(popGroup$pop)]]
popResults$super <- popGroup$group
names(popResults)[1] <- "pop"
popResults$group <- popGroup[popResults$pop,"group"]
popResults <- popResults[order(group,pop)]
popResults$pop <- factor(popResults$pop, levels=popResults$pop)
maxYvalue <- 200
ggPVals <- ggplot(popResults, aes(y=-log(structureKSTest), x=pop)) +
#     geom_hline(yintercept=-log(.05)) + #geom_text(aes(13,-log(.05),label = "alpha = .05", vjust = -1),parse = T) +
geom_hline(yintercept=0) +
geom_hline(yintercept=-log(.01), linetype='dashed', color="red") + #geom_text(aes(20,-log(.01),size=5,label = "alpha == .01", vjust = -1),parse = T) +
annotation_custom(
grob = textGrob(label = expression(alpha==.01), hjust = 0, gp = gpar(col="red",fontsize=10, cex = 1.5)),
ymin = -log(.01),      # Vertical position of the textGrob
ymax = -log(.01),
xmin = 27,         # Note: The grobs are positioned outside the plot area
xmax = 27) +
ggtitle("p-value for structure in each population") + theme_bw() +
ylab("-log(p-value)") + xlab("Population") + ggtitle("Structure Detected in 1000 Genomes Populations") +
guides(color = guide_legend(title = "Super population")) +
ylim(0,maxYvalue) +
geom_point(aes(color=group),size=3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
gt <- ggplot_gtable(ggplot_build(ggPVals))
popResults
log(popResults$structureKSTest)
log(as.numeric(popResults$structureKSTest))
ggPVals <- ggplot(popResults, aes(y=-log(as.numeric(structureKSTest)), x=pop)) +
#     geom_hline(yintercept=-log(.05)) + #geom_text(aes(13,-log(.05),label = "alpha = .05", vjust = -1),parse = T) +
geom_hline(yintercept=0) +
geom_hline(yintercept=-log(.01), linetype='dashed', color="red") + #geom_text(aes(20,-log(.01),size=5,label = "alpha == .01", vjust = -1),parse = T) +
annotation_custom(
grob = textGrob(label = expression(alpha==.01), hjust = 0, gp = gpar(col="red",fontsize=10, cex = 1.5)),
ymin = -log(.01),      # Vertical position of the textGrob
ymax = -log(.01),
xmin = 27,         # Note: The grobs are positioned outside the plot area
xmax = 27) +
ggtitle("p-value for structure in each population") + theme_bw() +
ylab("-log(p-value)") + xlab("Population") + ggtitle("Structure Detected in 1000 Genomes Populations") +
guides(color = guide_legend(title = "Super population")) +
ylim(0,maxYvalue) +
geom_point(aes(color=group),size=3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
gt <- ggplot_gtable(ggplot_build(ggPVals))
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
outputDir<- "."
simResults <- readRDS(paste0("./plots/s_distributions/",outputDir,"/plotdata/Simulated_data.rds"))
